{{- $global := (dict "Values" (deepCopy .Values) "Release" (deepCopy .Release) "Chart" (deepCopy .Chart) "Template" (deepCopy .Template)) -}}
{{- $app := .Values.server }}
{{- $fullname := (include "victoria-metrics.server.fullname" .) }}
{{- if and $app.enabled (not $app.statefulSet.enabled) -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  {{- with $app.annotations }}
  annotations: {{ toYaml . | nindent 4 }}
  {{- end }}
  {{- $ctx := merge (deepCopy $global) (dict "extraLabels" $app.extraLabels) }}
  labels: {{ include "victoria-metrics.server.labels" $ctx | nindent 4 }}
  name: {{ $fullname }}
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels: {{ include "victoria-metrics.server.matchLabels" . | nindent 6 }}
  replicas: 1
  {{- if $app.persistentVolume.enabled }}
  strategy:
    # Must be "Recreate" when we have a persistent volume
    type: Recreate
  {{- end }}
  template:
    metadata:
      {{- with $app.podAnnotations }}
      annotations: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- $ctx := merge (deepCopy $global) (dict "extraLabels" $app.podLabels) }}
      labels: {{ include "victoria-metrics.server.labels" $ctx | nindent 8 }}
    spec:
      {{- with $app.priorityClassName }}
      priorityClassName: {{ . }}
      {{- end }}
      {{- with $app.schedulerName }}
      schedulerName: {{ . }}
      {{- end }}
      automountServiceAccountToken: {{ .Values.serviceAccount.automountToken }}
      {{- $manager := $app.vmbackupmanager }}
      {{- if or $app.initContainers $manager.restore.onStart.enabled }}
      initContainers:
      {{- with $app.initContainers -}}
      {{- toYaml . | nindent 6 }}
      {{- end -}}
      {{- if $manager.restore.onStart.enabled }}
      {{- include "vm.enterprise.only" . }}
      - name: vmbackupmanager-restore
        image: {{ include "vm.image" (merge (deepCopy .) (dict "app" $manager)) }}
        imagePullPolicy: {{ $app.image.pullPolicy }}
        {{- with $app.podSecurityContext }}
        securityContext:  {{ toYaml . | nindent 10 }}
        {{- end }}
        args: {{ include "vmbackupmanager.restore.args" . | nindent 12 }}
        {{- with $manager.resources }}
        resources: {{ toYaml . | nindent 10 }}
        {{- end }}
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        {{- with $manager.env }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        ports:
        - name: manager-http
          containerPort: 8300
        volumeMounts:
        - name: vmstorage-volume
          mountPath: {{ $app.persistentVolume.mountPath }}
          subPath: {{ $app.persistentVolume.subPath }}
        {{- range $manager.extraSecretMounts }}
        - name: {{ .name }}
          mountPath: {{ .mountPath }}
          subPath: {{ .subPath }}
        {{- end }}
      {{- end }}
      {{- end }}
      {{- with ($app.imagePullSecrets | default .Values.global.imagePullSecrets) }}
      imagePullSecrets: {{ toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: vmsingle
          {{- if $app.securityContext.enabled }}
          securityContext: {{ include "vm.compatibility.renderSecurityContext" (dict "secContext" $app.securityContext "context" .) | nindent 12 }}
          {{- end }}
          image: {{ include "vm.image" (merge (deepCopy $global) (dict "app" $app)) }}
          imagePullPolicy: {{ $app.image.pullPolicy }}
          {{- if $app.containerWorkingDir }}
          workingDir: {{ $app.containerWorkingDir }}
          {{- end }}
          args: {{ include "vmsingle.args" . | nindent 12 }}
          {{- with $app.envFrom }}
          envFrom: {{ toYaml . | nindent 12 }}
          {{- end }}
          {{- with $app.env }}
          env: {{ toYaml . | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ include "vm.port.from.flag" (dict "flag" $app.extraArgs.httpListenAddr "default" "8428") }}
            {{- with $app.extraArgs.graphiteListenAddr }}
            - name: graphite-tcp
              protocol: TCP
              containerPort: {{ include "vm.port.from.flag" (dict "flag" .) }}
            - name: graphite-udp
              protocol: UDP
              containerPort: {{ include "vm.port.from.flag" (dict "flag" .) }}
            {{- end }}
            {{- with $app.extraArgs.influxListenAddr }}
            - name: influx-tcp
              protocol: TCP
              containerPort: {{ include "vm.port.from.flag" (dict "flag" .) }}
            - name: influx-udp
              protocol: UDP
              containerPort: {{ include "vm.port.from.flag" (dict "flag" .) }}
            {{- end }}
            {{- with $app.extraArgs.opentsdbHTTPListenAddr }}
            - name: opentsdbhttp
              protocol: TCP
              containerPort: {{ include "vm.port.from.flag" (dict "flag" .) }}
            {{- end }}
            {{- with $app.extraArgs.opentsdbListenAddr }}
            - name: opentsdb-tcp
              protocol: TCP
              containerPort: {{ include "vm.port.from.flag" (dict "flag" .) }}
            - name: opentsdb-udp
              protocol: UDP
              containerPort: {{ include "vm.port.from.flag" (dict "flag" .) }}
            {{- end }}
          {{- with (fromYaml (include "vm.probe" (dict "app" $app "type" "readiness"))) }}
          readinessProbe: {{ toYaml . | nindent 12 }}
          {{- end }}
          {{- with (fromYaml (include "vm.probe" (dict "app" $app "type" "liveness"))) }}
          livenessProbe: {{ toYaml . | nindent 12 }}
          {{- end }}
          {{- with (fromYaml (include "vm.probe" (dict "app" $app "type" "startup"))) }}
          startupProbe: {{ toYaml . | nindent 12 }}
          {{- end }}
          {{- with $app.resources }}
          resources: {{ toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            {{- with $app.persistentVolume }}
            - name: server-volume
              mountPath: {{ .mountPath }}
              {{- with .subPath }}
              subPath: {{ . }}
              {{- end }}
            {{- end }}
            {{- if $app.scrape.enabled }}
            - name: scrapeconfig
              mountPath: /scrapeconfig
            {{- end }}
            {{- if $app.relabel.enabled }}
            - name: relabelconfig
              mountPath: /relabelconfig
            {{- end }}
            {{- range $app.extraHostPathMounts }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              {{- with .subPath }}
              subPath: {{ . }}
              {{- end }}
              {{- with .readOnly }}
              readOnly: {{ . }}
              {{- end }}
            {{- end }}
            {{- range $app.extraConfigmapMounts }}
            - name: {{ $app.name }}-{{ .name }}
              mountPath: {{ .mountPath }}
              {{- with .subPath }}
              subPath: {{ . }}
              {{- end }}
              {{- with .readOnly }}
              readOnly: {{ . }}
              {{- end }}
            {{- end }}
            {{- range $app.extraSecretMounts }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              {{- with .subPath }}
              subPath: {{ . }}
              {{- end }}
              {{- with .readOnly }}
              readOnly: {{ . }}
              {{- end }}
            {{- end }}
            {{- include "vm.license.mount" . | nindent 12 }}
            {{- with $app.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
        {{- if hasKey $manager "enable" }}
          {{- fail "`server.vmbackupmanager.enable` is deprecated. Use `server.vmbackupmanager.enabled` instead"}}
        {{- end }}
        {{- if $manager.enabled }}
        {{- include "vm.enterprise.only" . }}
        - name: vmbackupmanager
          image: {{ include "vm.image" (merge (deepCopy $global) (dict "app" $manager)) }}
          imagePullPolicy: {{ $app.image.pullPolicy }}
          args: {{ include "vmbackupmanager.args" . | nindent 12 }}
          {{- with (fromYaml (include "vm.probe" (dict "app" $manager "type" "readiness"))) }}
          readinessProbe: {{ toYaml . | nindent 12 }}
          {{- end }}
          {{- with (fromYaml (include "vm.probe" (dict "app" $manager "type" "liveness"))) }}
          livenessProbe: {{ toYaml . | nindent 12 }}
          {{- end }}
          {{- with (fromYaml (include "vm.probe" (dict "app" $manager "type" "startup"))) }}
          startupProbe: {{ toYaml . | nindent 12 }}
          {{- end }}
          {{- with $manager.resources }}
          resources: {{ toYaml . | nindent 12 }}
          {{- end }}
          {{- with $manager.env }}
          env: {{ toYaml . | nindent 12 }}
          {{- end }}
          ports:
            - name: manager-http
              containerPort: 8300
          volumeMounts:
            {{- with $app.persistentVolume }}
            - name: server-volume
              mountPath: {{ .mountPath }}
              {{- with .subPath }}
              subPath: {{ . }}
              {{- end }}
            {{- end }}
            {{- with $manager.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
            {{- include "vm.license.mount" . | nindent 12 }}
        {{- end }}
        {{- with $app.extraContainers }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with $app.nodeSelector }}
      nodeSelector: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- if $app.podSecurityContext.enabled }}
      securityContext: {{ include "vm.compatibility.renderSecurityContext" (dict "secContext" $app.podSecurityContext "context" .) | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ template "victoria-metrics.serviceAccountName" . }}
      {{- with $app.tolerations }}
      tolerations: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with $app.affinity }}
      affinity: {{ toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ $app.terminationGracePeriodSeconds }}
      volumes:
        {{- if $app.scrape.enabled }}
        - name: scrapeconfig
          configMap:
            name: {{ include "victoria-metrics.server.scrape.configname" . }}
        {{- end }}
        {{- if $app.relabel.enabled }}
        - name: relabelconfig
          configMap
            name: {{ include "victoria-metrics.server.relabel.configname" . }}
        {{- end }}
        {{- with $app.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        - name: server-volume
          {{- if $app.persistentVolume.enabled }}
          persistentVolumeClaim:
            claimName: {{ $app.persistentVolume.existingClaim | default $fullname }}
          {{- else }}
          emptyDir: {{ toYaml $app.emptyDir | nindent 12 }}
          {{- end }}
        {{- include "vm.license.volume" . | nindent 8 }}
{{- end }}
