
{{- $Values := (.helm).Values | default .Values }}
{{- $multicluster := ((($Values.grafana).sidecar).dashboards).multicluster | default false }}
{{- $defaultDatasource := "prometheus" -}}
{{- $clusterLabel := ($Values.global).clusterLabel | default "cluster" }}
{{- range (((($Values.grafana).sidecar).datasources).victoriametrics | default list) }}
  {{- if and .isDefault .type }}{{ $defaultDatasource = .type }}{{- end }}
{{- end }}
title: VictoriaLogs - single-node
templating:
  list:
  - name: ds
    type: datasource
    query: {{ $defaultDatasource }}
    current:
      text: default
      value: default
    options: []
    refresh: 1
    regex: ""
  - name: job
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    type: query
    query:
      query: {{ printf "label_values(vm_app_version{version=~\"victoria-logs-.*\",%s=~\"$cluster\"}, job)" $clusterLabel }}
      refId: StandardVariableQuery
    current:
      text: kubernetes-pods
      value: kubernetes-pods
    definition: label_values(vm_app_version{version=~"victoria-logs-.*"}, job)
    options: []
    refresh: 1
    regex: ""
  - name: instance
    multi: true
    includeAll: true
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    type: query
    query:
      query: {{ printf "label_values(vm_app_version{job=~\"$job\",%s=~\"$cluster\"}, instance)" $clusterLabel }}
      refId: StandardVariableQuery
    current:
      text: All
      value:
      - $__all
    definition: label_values(vm_app_version{job=~"$job"}, instance)
    options: []
    refresh: 1
    regex: ""
  - name: version
    datasource:
      type: {{ $defaultDatasource }}
      uid: ${ds}
    type: query
    query:
      qryType: 1
      query: {{ printf "label_values(vm_app_version{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}, short_version)" $clusterLabel }}
      refId: PrometheusVariableQueryEditor-VariableQuery
    hide: ""
    current:
      text: ""
      value: ""
    definition: label_values(vm_app_version{job=~"$job", instance=~"$instance"},short_version)
    options: []
    refresh: 1
    regex: ""
  - name: adhoc
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    type: adhoc
    baseFilters: []
    filters: []
  - name: cluster
    label: cluster
    multi: true
    includeAll: true
    datasource:
      type: {{ $defaultDatasource }}
    type: {{ ternary "query" "constant" $multicluster }}
    query: {{ ternary (printf "label_values(vm_app_version, %s)" $clusterLabel) ".*" $multicluster }}
    hide: {{ ternary 0 2 $multicluster }}
editable: false
timezone: {{ default "utc" ($Values.defaultDashboards).defaultTimezone }}
tags:
- victoriametrics
- victorialogs
- vm-k8s-stack
annotations:
  list:
  - name: Annotations & Alerts
    datasource:
      type: grafana
      uid: -- Grafana --
    builtIn: 1
    enable: true
    hide: true
    iconColor: rgba(0, 211, 255, 1)
    target:
      limit: 100
      matchAny: false
      tags: []
      type: dashboard
    type: dashboard
  - name: version change
    expr: {{ printf "sum(vm_app_version{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}) by(short_version,%s) unless sum(vm_app_version{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"} offset $__interval) by(short_version,%s)" $clusterLabel $clusterLabel $clusterLabel $clusterLabel }}
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    enable: true
    hide: true
    iconColor: blue
    textFormat: '{{`{{`}}short_version{{`}}`}}'
    titleFormat: Version change
  - name: restarts
    expr: {{ printf "sum(changes(vm_app_start_timestamp{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__interval])) by(job,%s)" $clusterLabel $clusterLabel }}
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    enable: true
    hide: true
    iconColor: orange
    textFormat: '{{`{{`}}instance{{`}}`}} restarted'
  - name: gc
    datasource:
      type: {{ $defaultDatasource }}
      uid: ${ds}
    enable: false
    filter:
      exclude: false
      ids:
      - 75
    hide: false
    iconColor: '#57f26d1c'
    target:
      expr: go_memstats_last_gc_time_seconds{job=~"$job", instance=~"$instance"} * 1000
      interval: ""
      refId: Anno
    textFormat: GC event
    useValueForTime: true
panels:
- title: Stats
  collapsed: false
  gridPos:
    h: 1
    w: 24
    x: 0
    "y": 0
  id: 16
  type: row
- title: Total log entries
  targets:
  - datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    expr: {{ printf "sum(vl_storage_rows{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}) by(%s)" $clusterLabel $clusterLabel }}
    editorMode: code
    exemplar: false
    format: time_series
    instant: true
    interval: ""
    intervalFactor: 1
    legendFormat: total
    refId: A
  datasource:
    type: {{ $defaultDatasource }}
    uid: $ds
  description: Total amount of log entries in the storage.
  fieldConfig:
    defaults:
      color:
        mode: thresholds
      mappings: []
      thresholds:
        mode: absolute
        steps:
        - color: green
          value: 0
      unit: short
    overrides: []
  gridPos:
    h: 4
    w: 4
    x: 0
    "y": 1
  id: 133
  maxDataPoints: 100
  options:
    colorMode: value
    graphMode: area
    justifyMode: auto
    orientation: horizontal
    percentChangeColorMode: standard
    reduceOptions:
      calcs:
      - lastNotNull
      fields: ""
      values: false
    showPercentChange: false
    text: {}
    textMode: auto
    wideLayout: true
  pluginVersion: 12.1.0
  type: stat
- title: Ingested logs 24h
  targets:
  - datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    expr: {{ printf "sum(increase(vl_rows_ingested_total{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[24h])) by(%s)" $clusterLabel $clusterLabel }}
    editorMode: code
    exemplar: false
    format: time_series
    instant: true
    interval: ""
    intervalFactor: 1
    legendFormat: total
    refId: A
  datasource:
    type: {{ $defaultDatasource }}
    uid: $ds
  description: The total number of log entries ingested over the past 24 hours.
  fieldConfig:
    defaults:
      color:
        mode: thresholds
      mappings: []
      thresholds:
        mode: absolute
        steps:
        - color: green
          value: 0
      unit: short
    overrides: []
  gridPos:
    h: 4
    w: 5
    x: 4
    "y": 1
  id: 134
  maxDataPoints: 100
  options:
    colorMode: value
    graphMode: area
    justifyMode: auto
    orientation: horizontal
    percentChangeColorMode: standard
    reduceOptions:
      calcs:
      - lastNotNull
      fields: ""
      values: false
    showPercentChange: false
    text: {}
    textMode: auto
    wideLayout: true
  pluginVersion: 12.1.0
  type: stat
- title: Insert req/s
  targets:
  - datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    expr: {{ printf "sum(rate(vl_rows_ingested_total{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval])) by(%s)" $clusterLabel $clusterLabel }}
    editorMode: code
    exemplar: false
    format: time_series
    instant: true
    interval: ""
    intervalFactor: 1
    legendFormat: total
    refId: A
  datasource:
    type: {{ $defaultDatasource }}
    uid: $ds
  description: Average ingestion rate of log entries.
  fieldConfig:
    defaults:
      color:
        mode: thresholds
      mappings: []
      thresholds:
        mode: absolute
        steps:
        - color: green
          value: 0
      unit: short
    overrides: []
  gridPos:
    h: 4
    w: 5
    x: 9
    "y": 1
  id: 135
  maxDataPoints: 100
  options:
    colorMode: value
    graphMode: area
    justifyMode: auto
    orientation: horizontal
    percentChangeColorMode: standard
    reduceOptions:
      calcs:
      - lastNotNull
      fields: ""
      values: false
    showPercentChange: false
    text: {}
    textMode: auto
    wideLayout: true
  pluginVersion: 12.1.0
  type: stat
- title: Disk space usage
  targets:
  - datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    expr: {{ printf "sum(vl_data_size_bytes{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}) by(%s)" $clusterLabel $clusterLabel }}
    editorMode: code
    exemplar: false
    format: time_series
    instant: true
    interval: ""
    intervalFactor: 1
    legendFormat: total
    refId: A
  datasource:
    type: {{ $defaultDatasource }}
    uid: $ds
  description: |-
    Total amount of used disk space.
    Accounts for all compressed log entries and index size.

    See how to [control disk usage](https://docs.victoriametrics.com/victorialogs/#retention-by-disk-space-usage).
  fieldConfig:
    defaults:
      color:
        mode: thresholds
      mappings: []
      thresholds:
        mode: absolute
        steps:
        - color: green
          value: 0
      unit: bytes
    overrides: []
  gridPos:
    h: 4
    w: 5
    x: 14
    "y": 1
  id: 136
  maxDataPoints: 100
  options:
    colorMode: value
    graphMode: area
    justifyMode: auto
    orientation: horizontal
    percentChangeColorMode: standard
    reduceOptions:
      calcs:
      - lastNotNull
      fields: ""
      values: false
    showPercentChange: false
    text: {}
    textMode: auto
    wideLayout: true
  pluginVersion: 12.1.0
  type: stat
- title: Available CPU
  targets:
  - datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    expr: {{ printf "sum(vm_available_cpu_cores{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}) by(%s)" $clusterLabel $clusterLabel }}
    editorMode: code
    exemplar: false
    format: time_series
    instant: true
    interval: ""
    intervalFactor: 1
    legendFormat: total
    refId: A
  datasource:
    type: {{ $defaultDatasource }}
    uid: $ds
  description: Integer number of CPU cores available to the application. This value is automatically rounded down from fractional CPU quotas. For optimal performance, fractional CPU units should be avoided. See the [best practices](https://docs.victoriametrics.com/victoriametrics/bestpractices/#kubernetes) documentation for more details.
  fieldConfig:
    defaults:
      color:
        mode: thresholds
      mappings: []
      thresholds:
        mode: absolute
        steps:
        - color: green
          value: 0
      unit: short
    overrides: []
  gridPos:
    h: 4
    w: 5
    x: 19
    "y": 1
  id: 137
  maxDataPoints: 100
  options:
    colorMode: value
    graphMode: area
    justifyMode: auto
    orientation: horizontal
    percentChangeColorMode: standard
    reduceOptions:
      calcs:
      - lastNotNull
      fields: ""
      values: false
    showPercentChange: false
    text: {}
    textMode: auto
    wideLayout: true
  pluginVersion: 12.1.0
  type: stat
- title: Version
  description: See [latest releases](https://docs.victoriametrics.com/victorialogs/changelog/).
  fieldConfig:
    defaults: {}
    overrides: []
  gridPos:
    h: 4
    w: 4
    x: 0
    "y": 5
  id: 138
  options:
    code:
      language: plaintext
      showLineNumbers: false
      showMiniMap: false
    content: '<div style="text-align: center;">$version</div>'
    mode: markdown
  pluginVersion: 12.1.0
  type: text
- title: Ingested bytes 24h
  targets:
  - datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    expr: {{ printf "sum(increase(vl_bytes_ingested_total{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[24h])) by(%s)" $clusterLabel $clusterLabel }}
    editorMode: code
    exemplar: false
    format: time_series
    instant: true
    interval: ""
    intervalFactor: 1
    legendFormat: total
    refId: A
  datasource:
    type: {{ $defaultDatasource }}
    uid: $ds
  description: "The cumulative number of log entries ingested over the last 24h. \n\nThe size is calculated before compression."
  fieldConfig:
    defaults:
      color:
        mode: thresholds
      mappings: []
      thresholds:
        mode: absolute
        steps:
        - color: green
          value: 0
      unit: bytes
    overrides: []
  gridPos:
    h: 4
    w: 5
    x: 4
    "y": 5
  id: 139
  maxDataPoints: 100
  options:
    colorMode: value
    graphMode: area
    justifyMode: auto
    orientation: horizontal
    percentChangeColorMode: standard
    reduceOptions:
      calcs:
      - lastNotNull
      fields: ""
      values: false
    showPercentChange: false
    text: {}
    textMode: auto
    wideLayout: true
  pluginVersion: 12.1.0
  type: stat
- title: Read req/s
  targets:
  - datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    expr: {{ printf "sum(rate(vl_http_requests_total{job=~\"$job\",instance=~\"$instance\",path=~\"/select/.*\",%s=~\"$cluster\"}[$__rate_interval])) by(%s)" $clusterLabel $clusterLabel }}
    editorMode: code
    exemplar: false
    format: time_series
    instant: true
    interval: ""
    intervalFactor: 1
    legendFormat: total
    refId: A
  datasource:
    type: {{ $defaultDatasource }}
    uid: $ds
  description: Rate of HTTP read requests.
  fieldConfig:
    defaults:
      color:
        mode: thresholds
      mappings: []
      thresholds:
        mode: absolute
        steps:
        - color: green
          value: 0
      unit: short
    overrides: []
  gridPos:
    h: 4
    w: 5
    x: 9
    "y": 5
  id: 140
  maxDataPoints: 100
  options:
    colorMode: value
    graphMode: area
    justifyMode: auto
    orientation: horizontal
    percentChangeColorMode: standard
    reduceOptions:
      calcs:
      - lastNotNull
      fields: ""
      values: false
    showPercentChange: false
    text: {}
    textMode: auto
    wideLayout: true
  pluginVersion: 12.1.0
  type: stat
- title: Compression ratio
  targets:
  - datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    expr: {{ printf "sum(vl_uncompressed_data_size_bytes{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}) by(%s) / sum(vl_compressed_data_size_bytes{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}) by(%s)" $clusterLabel $clusterLabel $clusterLabel $clusterLabel }}
    editorMode: code
    exemplar: false
    format: time_series
    instant: true
    interval: ""
    intervalFactor: 1
    legendFormat: '{{`{{`}}instance{{`}}`}}'
    refId: A
  datasource:
    type: {{ $defaultDatasource }}
    uid: $ds
  description: "The ratio between original data size and compressed data stored on disk. This metric excludes indexdb size. \n\nThe ratio can go up or down as the system performs automatic maintenance and applies retention policies. For examples:\n- Background merges: [Merges](https://docs.victoriametrics.com/victorialogs/#forced-merge) improve compression by combining data into larger, more efficiently compressed blocks\n- Retention policies: When old data is deleted due to retention settings, the ratio changes as different time periods have varying compression characteristics\n\n"
  fieldConfig:
    defaults:
      color:
        mode: thresholds
      mappings: []
      thresholds:
        mode: absolute
        steps:
        - color: green
          value: 0
      unit: none
    overrides: []
  gridPos:
    h: 4
    w: 5
    x: 14
    "y": 5
  id: 141
  maxDataPoints: 100
  options:
    colorMode: value
    graphMode: area
    justifyMode: auto
    orientation: horizontal
    percentChangeColorMode: standard
    reduceOptions:
      calcs:
      - lastNotNull
      fields: ""
      values: false
    showPercentChange: false
    text: {}
    textMode: auto
    wideLayout: true
  pluginVersion: 12.1.0
  type: stat
- title: Available memory
  targets:
  - datasource:
      uid: $ds
    expr: {{ printf "sum(vm_available_memory_bytes{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}) by(%s)" $clusterLabel $clusterLabel }}
    editorMode: code
    exemplar: false
    format: time_series
    instant: true
    interval: ""
    intervalFactor: 1
    legendFormat: total
    refId: A
  datasource:
    type: {{ $defaultDatasource }}
    uid: $ds
  description: Total system memory available to the application. This represents the system or container's memory capacity or limit, not the currently free memory.
  fieldConfig:
    defaults:
      color:
        mode: thresholds
      mappings: []
      thresholds:
        mode: absolute
        steps:
        - color: green
          value: 0
      unit: bytes
    overrides: []
  gridPos:
    h: 4
    w: 5
    x: 19
    "y": 5
  id: 142
  maxDataPoints: 100
  options:
    colorMode: value
    graphMode: area
    justifyMode: auto
    orientation: horizontal
    percentChangeColorMode: standard
    reduceOptions:
      calcs:
      - lastNotNull
      fields: ""
      values: false
    showPercentChange: false
    text: {}
    textMode: auto
    wideLayout: true
  pluginVersion: 12.1.0
  type: stat
- title: Overview
  collapsed: false
  gridPos:
    h: 1
    w: 24
    x: 0
    "y": 9
  id: 18
  type: row
- title: Logs ingestion rate
  targets:
  - datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    expr: {{ printf "sum(rate(vl_rows_ingested_total{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval])) by(type,%s) > 0" $clusterLabel $clusterLabel }}
    editorMode: code
    format: time_series
    hide: false
    intervalFactor: 1
    legendFormat: '{{`{{`}}type{{`}}`}}'
    range: true
    refId: A
  - datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    expr: {{ printf "sum(rate(vl_bytes_ingested_total{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval])) by(type,%s) > 0" $clusterLabel $clusterLabel }}
    editorMode: code
    hide: false
    instant: false
    legendFormat: '{{`{{`}}type{{`}}`}} (bytes)'
    range: true
    refId: B
  datasource:
    type: {{ $defaultDatasource }}
    uid: $ds
  description: Ingestion rate in number of log entries and bytes per second.
  fieldConfig:
    defaults:
      color:
        mode: palette-classic
      custom:
        axisBorderShow: false
        axisCenteredZero: false
        axisColorMode: text
        axisLabel: ""
        axisPlacement: auto
        barAlignment: 0
        barWidthFactor: 0.6
        drawStyle: line
        fillOpacity: 0
        gradientMode: none
        hideFrom:
          legend: false
          tooltip: false
          viz: false
        insertNulls: false
        lineInterpolation: linear
        lineWidth: 1
        pointSize: 5
        scaleDistribution:
          type: linear
        showPoints: never
        spanNulls: false
        stacking:
          group: A
          mode: none
        thresholdsStyle:
          mode: "off"
      links: []
      mappings: []
      min: 0
      thresholds:
        mode: absolute
        steps:
        - color: green
          value: 0
        - color: red
          value: 80
      unit: short
    overrides:
    - matcher:
        id: byRegexp
        options: /.*(bytes)/
      properties:
      - id: custom.axisPlacement
        value: right
      - id: unit
        value: bytes
  gridPos:
    h: 8
    w: 12
    x: 0
    "y": 10
  id: 2
  options:
    legend:
      calcs:
      - mean
      - lastNotNull
      displayMode: table
      placement: bottom
      showLegend: true
      sortBy: Last *
      sortDesc: true
    tooltip:
      hideZeros: false
      mode: multi
      sort: desc
  pluginVersion: 12.1.0
  type: timeseries
- title: Requests rate
  targets:
  - datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    expr: {{ printf "sum(rate(vl_http_requests_total{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval])) by(path,%s) > 0" $clusterLabel $clusterLabel }}
    editorMode: code
    format: time_series
    interval: ""
    intervalFactor: 1
    legendFormat: '{{`{{`}}path{{`}}`}}'
    range: true
    refId: A
  datasource:
    type: {{ $defaultDatasource }}
    uid: $ds
  description: |-
    * `*` - unsupported query path
    * `/insert` - [inserts](https://docs.victoriametrics.com/victorialogs/data-ingestion/)
    * `/select` - [reads](https://docs.victoriametrics.com/victorialogs/querying/)
    * `/metrics` - scraping of system metrics
  fieldConfig:
    defaults:
      color:
        mode: palette-classic
      custom:
        axisBorderShow: false
        axisCenteredZero: false
        axisColorMode: text
        axisLabel: ""
        axisPlacement: auto
        barAlignment: 0
        barWidthFactor: 0.6
        drawStyle: line
        fillOpacity: 0
        gradientMode: none
        hideFrom:
          legend: false
          tooltip: false
          viz: false
        insertNulls: false
        lineInterpolation: linear
        lineWidth: 1
        pointSize: 5
        scaleDistribution:
          type: linear
        showPoints: never
        spanNulls: false
        stacking:
          group: A
          mode: none
        thresholdsStyle:
          mode: "off"
      links: []
      mappings: []
      min: 0
      noValue: "0"
      thresholds:
        mode: absolute
        steps:
        - color: green
          value: 0
        - color: red
          value: 80
      unit: short
    overrides: []
  gridPos:
    h: 8
    w: 12
    x: 12
    "y": 10
  id: 14
  options:
    legend:
      calcs:
      - mean
      - lastNotNull
      - max
      displayMode: table
      placement: bottom
      showLegend: true
      sortBy: Last *
      sortDesc: true
    tooltip:
      hideZeros: false
      mode: multi
      sort: desc
  pluginVersion: 12.1.0
  type: timeseries
- title: Requests error rate
  targets:
  - datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    expr: {{ printf "sum(rate(vm_http_request_errors_total{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval])) by(path,%s)" $clusterLabel $clusterLabel }}
    editorMode: code
    exemplar: false
    format: time_series
    interval: ""
    intervalFactor: 1
    legendFormat: '{{`{{`}}path{{`}}`}}'
    range: true
    refId: A
  - datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    expr: {{ printf "sum(rate(vl_http_errors_total{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval])) by(path,%s)" $clusterLabel $clusterLabel }}
    editorMode: code
    exemplar: false
    format: time_series
    hide: false
    interval: ""
    intervalFactor: 1
    legendFormat: '{{`{{`}}path{{`}}`}}'
    range: true
    refId: B
  datasource:
    type: {{ $defaultDatasource }}
    uid: $ds
  description: |-
    * `*` - unsupported query path
    * `/insert` - [inserts](https://docs.victoriametrics.com/victorialogs/data-ingestion/)
    * `/select` - [reads](https://docs.victoriametrics.com/victorialogs/querying/)
    * `/metrics` - scraping of system metrics
  fieldConfig:
    defaults:
      color:
        mode: palette-classic
      custom:
        axisBorderShow: false
        axisCenteredZero: false
        axisColorMode: text
        axisLabel: ""
        axisPlacement: auto
        barAlignment: 0
        barWidthFactor: 0.6
        drawStyle: line
        fillOpacity: 0
        gradientMode: none
        hideFrom:
          legend: false
          tooltip: false
          viz: false
        insertNulls: false
        lineInterpolation: linear
        lineWidth: 1
        pointSize: 5
        scaleDistribution:
          type: linear
        showPoints: never
        spanNulls: false
        stacking:
          group: A
          mode: none
        thresholdsStyle:
          mode: "off"
      links: []
      mappings: []
      min: 0
      thresholds:
        mode: absolute
        steps:
        - color: green
          value: 0
        - color: red
          value: 80
      unit: short
    overrides: []
  gridPos:
    h: 8
    w: 12
    x: 0
    "y": 18
  id: 69
  options:
    legend:
      calcs:
      - mean
      - lastNotNull
      displayMode: table
      placement: bottom
      showLegend: true
    tooltip:
      hideZeros: false
      mode: multi
      sort: desc
  pluginVersion: 12.1.0
  type: timeseries
- title: Request duration p99
  targets:
  - datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    expr: {{ printf "max(vl_http_request_duration_seconds{job=~\"$job\",instance=~\"$instance\",quantile=\"0.99\",%s=~\"$cluster\"}) by(path,%s) > 0" $clusterLabel $clusterLabel }}
    editorMode: code
    format: time_series
    intervalFactor: 1
    legendFormat: '{{`{{`}}path{{`}}`}}'
    range: true
    refId: A
  datasource:
    type: {{ $defaultDatasource }}
    uid: $ds
  description: 99th percentile response time for VictoriaLogs HTTP endpoints, grouped by instance and path. This means 99% of requests are faster than this value. **Lower numbers are better**, as they indicate faster responses and fewer slow requests.
  fieldConfig:
    defaults:
      color:
        mode: palette-classic
      custom:
        axisBorderShow: false
        axisCenteredZero: false
        axisColorMode: text
        axisLabel: ""
        axisPlacement: auto
        barAlignment: 0
        barWidthFactor: 0.6
        drawStyle: line
        fillOpacity: 0
        gradientMode: none
        hideFrom:
          legend: false
          tooltip: false
          viz: false
        insertNulls: false
        lineInterpolation: linear
        lineWidth: 1
        pointSize: 5
        scaleDistribution:
          type: linear
        showPoints: never
        spanNulls: false
        stacking:
          group: A
          mode: none
        thresholdsStyle:
          mode: "off"
      links: []
      mappings: []
      min: 0
      noValue: "0"
      thresholds:
        mode: absolute
        steps:
        - color: green
          value: 0
        - color: red
          value: 80
      unit: s
    overrides: []
  gridPos:
    h: 8
    w: 12
    x: 12
    "y": 18
  id: 66
  options:
    legend:
      calcs:
      - mean
      - lastNotNull
      - max
      displayMode: table
      placement: bottom
      showLegend: true
      sortBy: Last *
      sortDesc: true
    tooltip:
      hideZeros: false
      mode: multi
      sort: desc
  pluginVersion: 12.1.0
  type: timeseries
- title: Disk space usage
  targets:
  - datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    expr: {{ printf "max(vl_total_disk_space_bytes{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}) by(instance,%s)" $clusterLabel $clusterLabel }}
    editorMode: code
    format: time_series
    hide: false
    interval: ""
    intervalFactor: 1
    legendFormat: '{{`{{`}}instance{{`}}`}}'
    range: true
    refId: A
  datasource:
    type: {{ $defaultDatasource }}
    uid: $ds
  description: |-
    Amount of on-disk space occupied by all the data stored in the storage.

    See how to [control disk usage](https://docs.victoriametrics.com/victorialogs/#retention-by-disk-space-usage).
  fieldConfig:
    defaults:
      color:
        mode: palette-classic
      custom:
        axisBorderShow: false
        axisCenteredZero: false
        axisColorMode: text
        axisLabel: ""
        axisPlacement: auto
        axisSoftMax: 1
        axisSoftMin: 0
        barAlignment: 0
        barWidthFactor: 0.6
        drawStyle: line
        fillOpacity: 0
        gradientMode: none
        hideFrom:
          legend: false
          tooltip: false
          viz: false
        insertNulls: false
        lineInterpolation: linear
        lineWidth: 1
        pointSize: 5
        scaleDistribution:
          type: linear
        showPoints: never
        spanNulls: false
        stacking:
          group: A
          mode: none
        thresholdsStyle:
          mode: "off"
      links: []
      mappings: []
      min: 0
      thresholds:
        mode: absolute
        steps:
        - color: green
          value: 0
        - color: red
          value: 80
      unit: bytes
    overrides: []
  gridPos:
    h: 8
    w: 12
    x: 0
    "y": 26
  id: 6
  options:
    legend:
      calcs:
      - mean
      - lastNotNull
      - max
      displayMode: table
      placement: bottom
      showLegend: true
      sortBy: Last *
      sortDesc: true
    tooltip:
      hideZeros: false
      mode: multi
      sort: desc
  pluginVersion: 12.1.0
  type: timeseries
- title: VictoriaLogs internal logging
  targets:
  - datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    expr: {{ printf "sum(rate(vm_log_messages_total{job=~\"$job\",instance=~\"$instance\",level!=\"info\",%s=~\"$cluster\"}[$__rate_interval])) by(instance,level,location,%s)" $clusterLabel $clusterLabel }}
    editorMode: code
    interval: 5m
    legendFormat: '{{`{{`}}instance{{`}}`}} - {{`{{`}}level{{`}}`}}: {{`{{`}}location{{`}}`}}'
    range: true
    refId: A
  datasource:
    type: {{ $defaultDatasource }}
    uid: $ds
  description: Rate of VictoriaLogs' own application log messages (errors, warnings, debug) - NOT the logs that VictoriaLogs is collecting from external sources.
  fieldConfig:
    defaults:
      color:
        mode: palette-classic
      custom:
        axisBorderShow: false
        axisCenteredZero: false
        axisColorMode: text
        axisLabel: ""
        axisPlacement: auto
        barAlignment: 0
        barWidthFactor: 0.6
        drawStyle: bars
        fillOpacity: 0
        gradientMode: none
        hideFrom:
          legend: false
          tooltip: false
          viz: false
        insertNulls: false
        lineInterpolation: linear
        lineWidth: 1
        pointSize: 5
        scaleDistribution:
          type: linear
        showPoints: auto
        spanNulls: false
        stacking:
          group: A
          mode: none
        thresholdsStyle:
          mode: "off"
      mappings: []
      thresholds:
        mode: absolute
        steps:
        - color: green
          value: 0
        - color: red
          value: 80
    overrides:
    - matcher:
        id: byRegexp
        options: .*warn:.*
      properties:
      - id: color
        value:
          fixedColor: orange
          mode: fixed
    - matcher:
        id: byRegexp
        options: .*error:.*
      properties:
      - id: color
        value:
          fixedColor: red
          mode: fixed
  gridPos:
    h: 8
    w: 12
    x: 12
    "y": 26
  id: 67
  options:
    legend:
      calcs:
      - lastNotNull
      - mean
      - max
      displayMode: table
      placement: bottom
      showLegend: true
      sortBy: Last *
      sortDesc: true
    tooltip:
      hideZeros: false
      mode: single
      sort: none
  pluginVersion: 12.1.0
  type: timeseries
- title: Troubleshooting
  collapsed: false
  gridPos:
    h: 1
    w: 24
    x: 0
    "y": 34
  id: 68
  type: row
- title: Restarts
  targets:
  - datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    expr: {{ printf "sum(changes(vm_app_start_timestamp{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval])) by(instance,%s)" $clusterLabel $clusterLabel }}
    editorMode: code
    format: time_series
    hide: false
    instant: false
    legendFormat: '{{`{{`}}instance{{`}}`}}'
    refId: A
  datasource:
    type: {{ $defaultDatasource }}
    uid: $ds
  description: "Number of restarts per job. The chart can be useful to identify periodic process restarts and correlate them with potential issues or anomalies. \n\nNormally, processes shouldn't restart unless restart was inited by user. The reason of restarts should be figured out by checking the logs of each specific service. "
  fieldConfig:
    defaults:
      color:
        mode: palette-classic
      custom:
        axisBorderShow: false
        axisCenteredZero: false
        axisColorMode: text
        axisLabel: ""
        axisPlacement: auto
        axisSoftMin: 0
        barAlignment: 0
        barWidthFactor: 0.6
        drawStyle: line
        fillOpacity: 0
        gradientMode: none
        hideFrom:
          legend: false
          tooltip: false
          viz: false
        insertNulls: false
        lineInterpolation: stepAfter
        lineWidth: 1
        pointSize: 5
        scaleDistribution:
          type: linear
        showPoints: never
        spanNulls: false
        stacking:
          group: A
          mode: none
        thresholdsStyle:
          mode: "off"
      decimals: 0
      links: []
      mappings: []
      noValue: "0"
      thresholds:
        mode: absolute
        steps:
        - color: green
          value: 0
        - color: red
          value: 80
      unit: none
    overrides: []
  gridPos:
    h: 8
    w: 12
    x: 0
    "y": 35
  id: 62
  options:
    legend:
      calcs:
      - lastNotNull
      displayMode: table
      placement: bottom
      showLegend: true
      sortBy: Last *
      sortDesc: true
    tooltip:
      hideZeros: false
      mode: multi
      sort: desc
  pluginVersion: 12.1.0
  type: timeseries
- title: Streams churn rate 24h ($instance)
  targets:
  - datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    expr: {{ printf "sum(increase(vl_streams_created_total{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[1d])) by(instance,%s)" $clusterLabel $clusterLabel }}
    editorMode: code
    format: time_series
    interval: ""
    intervalFactor: 1
    legendFormat: '{{`{{`}}instance{{`}}`}}'
    range: true
    refId: A
  datasource:
    type: {{ $defaultDatasource }}
    uid: $ds
  description: The number of new [log streams](https://docs.victoriametrics.com/victorialogs/keyconcepts/#stream-fields) created over the last 24 hours. Lower rate is better. See [How to determine which fields must be associated with log streams?](https://docs.victoriametrics.com/victorialogs/keyconcepts/#how-to-determine-which-fields-must-be-associated-with-log-streams)
  fieldConfig:
    defaults:
      color:
        mode: palette-classic-by-name
      custom:
        axisBorderShow: false
        axisCenteredZero: false
        axisColorMode: text
        axisLabel: ""
        axisPlacement: auto
        barAlignment: 0
        barWidthFactor: 0.6
        drawStyle: line
        fillOpacity: 0
        gradientMode: none
        hideFrom:
          legend: false
          tooltip: false
          viz: false
        insertNulls: false
        lineInterpolation: linear
        lineStyle:
          fill: solid
        lineWidth: 1
        pointSize: 5
        scaleDistribution:
          type: linear
        showPoints: never
        spanNulls: false
        stacking:
          group: A
          mode: none
        thresholdsStyle:
          mode: "off"
      links: []
      mappings: []
      min: 0
      thresholds:
        mode: absolute
        steps:
        - color: green
          value: 0
        - color: red
          value: 80
      unit: short
    overrides: []
  gridPos:
    h: 8
    w: 12
    x: 12
    "y": 35
  id: 26
  options:
    legend:
      calcs:
      - mean
      - lastNotNull
      - max
      displayMode: table
      placement: bottom
      showLegend: true
      sortBy: Last *
      sortDesc: true
    tooltip:
      hideZeros: false
      mode: multi
      sort: desc
  pluginVersion: 12.1.0
  type: timeseries
- title: Non-default flags
  targets:
  - datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    expr: {{ printf "sum(flag{is_set=\"true\",job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}) by(job,instance,name,value,%s)" $clusterLabel $clusterLabel }}
    editorMode: code
    exemplar: false
    format: table
    instant: true
    legendFormat: '{{`{{`}}name{{`}}`}}={{`{{`}}value{{`}}`}}'
    range: false
    refId: A
  datasource:
    type: {{ $defaultDatasource }}
    uid: $ds
  description: Flags explicitly set to non-default values
  fieldConfig:
    defaults:
      color:
        mode: thresholds
      custom:
        align: auto
        cellOptions:
          type: auto
        inspect: false
      mappings: []
      thresholds:
        mode: absolute
        steps:
        - color: green
          value: 0
        - color: red
          value: 80
    overrides:
    - matcher:
        id: byName
        options: Time
      properties:
      - id: custom.hidden
        value: true
    - matcher:
        id: byName
        options: Value
      properties:
      - id: custom.hidden
        value: true
    - matcher:
        id: byName
        options: job
      properties:
      - id: custom.hidden
        value: true
  gridPos:
    h: 8
    w: 12
    x: 0
    "y": 43
  id: 70
  options:
    cellHeight: sm
    footer:
      countRows: false
      fields: ""
      reducer:
      - sum
      show: false
    showHeader: true
  pluginVersion: 12.1.0
  type: table
- title: Logs dropped for last 1h
  targets:
  - datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    expr: {{ printf "sum(increase(vl_rows_dropped_total{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[1h])) by(reason,%s)" $clusterLabel $clusterLabel }}
    editorMode: code
    exemplar: true
    hide: false
    interval: ""
    legendFormat: '{{`{{`}}reason{{`}}`}}'
    range: true
    refId: A
  - datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    expr: {{ printf "sum(increase(vl_too_long_lines_skipped_total{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[1h])) by(%s)" $clusterLabel $clusterLabel }}
    editorMode: code
    hide: false
    instant: false
    legendFormat: line_too_long
    range: true
    refId: B
  datasource:
    type: {{ $defaultDatasource }}
    uid: $ds
  description: |-
    Number of log entries ignored or dropped on insertion due to the following reasons:
    * Timestamp out of the retention period or in the future
    * Number of fields per entry exceeded
    * Line too long

    If this occurs, check the VictoriaLogs log for details.
  fieldConfig:
    defaults:
      color:
        mode: palette-classic
      custom:
        axisBorderShow: false
        axisCenteredZero: false
        axisColorMode: text
        axisLabel: ""
        axisPlacement: auto
        barAlignment: 0
        barWidthFactor: 0.6
        drawStyle: line
        fillOpacity: 0
        gradientMode: none
        hideFrom:
          legend: false
          tooltip: false
          viz: false
        insertNulls: false
        lineInterpolation: linear
        lineWidth: 1
        pointSize: 5
        scaleDistribution:
          type: linear
        showPoints: never
        spanNulls: false
        stacking:
          group: A
          mode: none
        thresholdsStyle:
          mode: "off"
      mappings: []
      noValue: "0"
      thresholds:
        mode: absolute
        steps:
        - color: green
          value: 0
        - color: red
          value: 80
      unit: short
    overrides: []
  gridPos:
    h: 8
    w: 12
    x: 12
    "y": 43
  id: 71
  options:
    legend:
      calcs:
      - mean
      - lastNotNull
      - max
      displayMode: table
      placement: bottom
      showLegend: true
      sortBy: Last *
      sortDesc: true
    tooltip:
      hideZeros: false
      mode: multi
      sort: none
  pluginVersion: 12.1.0
  type: timeseries
- title: Resource usage
  panels:
  - title: RSS % of memory limit
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "max(max_over_time(process_resident_memory_bytes{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval]) / vm_available_memory_bytes{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}) by(%s)" $clusterLabel $clusterLabel $clusterLabel }}
      editorMode: code
      exemplar: false
      format: time_series
      instant: true
      interval: ""
      intervalFactor: 1
      legendFormat: '{{`{{`}}instance{{`}}`}}'
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    description: Percentage of physical RAM used compared to the memory limit. If this percentage is high, check the `RSS` anonymous vs resident ratio panel for more details.
    fieldConfig:
      defaults:
        color:
          mode: thresholds
        mappings: []
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: yellow
            value: 0.8
          - color: red
            value: 0.9
        unit: percentunit
      overrides: []
    gridPos:
      h: 5
      w: 7
      x: 0
      "y": 52
    id: 79
    maxDataPoints: 100
    options:
      colorMode: value
      graphMode: area
      justifyMode: auto
      orientation: horizontal
      percentChangeColorMode: standard
      reduceOptions:
        calcs:
        - lastNotNull
        fields: ""
        values: false
      showPercentChange: false
      text: {}
      textMode: auto
      wideLayout: true
    pluginVersion: 12.1.0
    type: stat
  - title: Physical memory usage ($instance)
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "max(max_over_time(process_resident_memory_bytes{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval]) / vm_available_memory_bytes{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}) by(instance,%s)" $clusterLabel $clusterLabel $clusterLabel }}
      editorMode: code
      exemplar: false
      interval: ""
      legendFormat: '{{`{{`}}instance{{`}}`}}'
      range: true
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    description: |-
      How much memory (RAM) the VictoriaLogs process is actually using, compared to its allowed container or system limit. See 'Memory Usage' panel for a detailed breakdown.

      - Good: Below 70% most of the time, maybe spiking a bit under load.
      - Bad: Above 90% for more than 5 minutes = risk of out-of-memory (OOM) kill.
    fieldConfig:
      defaults:
        color:
          mode: palette-classic-by-name
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        links: []
        mappings: []
        max: 1
        min: 0
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: percentunit
      overrides: []
    gridPos:
      h: 10
      w: 17
      x: 7
      "y": 52
    id: 38
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: desc
    pluginVersion: 12.1.0
    type: timeseries
  - title: Anonymous / Resident ratio
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "max(process_resident_memory_anon_bytes{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"} / process_resident_memory_bytes{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}) by(%s)" $clusterLabel $clusterLabel $clusterLabel }}
      editorMode: code
      exemplar: false
      format: time_series
      instant: true
      interval: ""
      intervalFactor: 1
      legendFormat: '{{`{{`}}instance{{`}}`}}'
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    description: Portion of RAM that CANNOT be reclaimed without swapping. If both the `RSS`-to-limit percentage and this ratio are high, the process is at high risk of an `OOM` kill.
    fieldConfig:
      defaults:
        color:
          mode: thresholds
        mappings: []
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
        unit: percentunit
      overrides: []
    gridPos:
      h: 5
      w: 7
      x: 0
      "y": 57
    id: 78
    maxDataPoints: 100
    options:
      colorMode: value
      graphMode: area
      justifyMode: auto
      orientation: horizontal
      percentChangeColorMode: standard
      reduceOptions:
        calcs:
        - lastNotNull
        fields: ""
        values: false
      showPercentChange: false
      text: {}
      textMode: auto
      wideLayout: true
    pluginVersion: 12.1.0
    type: stat
  - title: Memory usage ($instance)
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "sum(process_resident_memory_anon_bytes{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}) by(%s)" $clusterLabel $clusterLabel }}
      editorMode: code
      format: time_series
      hide: false
      intervalFactor: 1
      legendFormat: anonymous resident memory
      range: true
      refId: A
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "sum(process_resident_memory_file_bytes{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}) by(%s)" $clusterLabel $clusterLabel }}
      editorMode: code
      format: time_series
      hide: false
      intervalFactor: 1
      legendFormat: file-backed resident memory
      range: true
      refId: B
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "sum(process_resident_memory_shared_bytes{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}) by(%s)" $clusterLabel $clusterLabel }}
      editorMode: code
      format: time_series
      hide: false
      intervalFactor: 1
      legendFormat: shared resident memory
      range: true
      refId: C
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    description: |-
      - Anonymous resident memory: Private memory allocated to the application that **cannot** be reclaimed by the kernel. Refer to the [Check/profile](https://docs.victoriametrics.com/victorialogs/#profiling) Go heap section for troubleshooting.
      - File-backed resident memory: Memory mapped from files, which can be safely reclaimed. Increases during querying. Correlate with `I/O` panels for further analysis.
      - Shared resident memory: Typically negligible. Large spikes may indicate unexpected shared memory consumers.
    fieldConfig:
      defaults:
        color:
          mode: palette-classic
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        links: []
        mappings: []
        min: 0
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: bytes
      overrides: []
    gridPos:
      h: 8
      w: 12
      x: 0
      "y": 62
    id: 40
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: desc
    pluginVersion: 12.1.0
    type: timeseries
  - title: CPU % usage ($instance)
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "max(rate(process_cpu_seconds_total{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval]) / process_cpu_cores_available{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}) by(instance,%s)" $clusterLabel $clusterLabel $clusterLabel }}
      editorMode: code
      exemplar: false
      format: time_series
      interval: ""
      intervalFactor: 1
      legendFormat: '{{`{{`}}instance{{`}}`}}'
      range: true
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    fieldConfig:
      defaults:
        color:
          mode: palette-classic
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        links: []
        mappings: []
        max: 1
        min: 0
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: percentunit
      overrides: []
    gridPos:
      h: 8
      w: 12
      x: 12
      "y": 62
    id: 118
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: none
    pluginVersion: 12.1.0
    type: timeseries
  - title: Memory pressure
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "sum(rate(process_pressure_memory_waiting_seconds_total{job=~\"$job\",%s=~\"$cluster\"}[$__rate_interval])) by(instance,%s)" $clusterLabel $clusterLabel }}
      editorMode: code
      format: time_series
      hide: false
      interval: ""
      intervalFactor: 2
      legendFormat: '{{`{{`}}instance{{`}}`}} - waiting'
      range: true
      refId: A
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "sum(rate(process_pressure_memory_stalled_seconds_total{job=~\"$job\",%s=~\"$cluster\"}[$__rate_interval])) by(instance,%s)" $clusterLabel $clusterLabel }}
      editorMode: code
      format: time_series
      hide: false
      interval: ""
      intervalFactor: 2
      legendFormat: '{{`{{`}}instance{{`}}`}} - stalled'
      range: true
      refId: B
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    description: |-
      Lower is better, e.g. 20% means the process was delayed by memory pressure 20% of the time. See [Pressure Stall Information](https://docs.kernel.org/accounting/psi.html).

      - waiting: Time fraction where at least one thread was blocked on memory.
      - stalled: Time fraction where every thread was blocked on memory (severe pressure).

      If queries slow down and both series spike, the host is likely limited by RAM or I/O throughput.
    fieldConfig:
      defaults:
        color:
          mode: palette-classic
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        decimals: 0
        links: []
        mappings: []
        max: 1
        min: 0
        noValue: "0"
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 0.2
        unit: percentunit
      overrides: []
    gridPos:
      h: 8
      w: 12
      x: 0
      "y": 70
    id: 73
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: desc
    pluginVersion: 12.1.0
    type: timeseries
  - title: CPU pressure
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "sum(rate(process_pressure_cpu_waiting_seconds_total{job=~\"$job\",%s=~\"$cluster\"}[$__rate_interval])) by(instance,%s)" $clusterLabel $clusterLabel }}
      editorMode: code
      format: time_series
      interval: ""
      intervalFactor: 2
      legendFormat: '{{`{{`}}instance{{`}}`}}: waiting'
      range: true
      refId: A
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "sum(rate(process_pressure_cpu_stalled_seconds_total{job=~\"$job\",%s=~\"$cluster\"}[$__rate_interval])) by(instance,%s)" $clusterLabel $clusterLabel }}
      editorMode: code
      format: time_series
      hide: false
      interval: ""
      intervalFactor: 2
      legendFormat: '{{`{{`}}instance{{`}}`}}: stalled'
      range: true
      refId: B
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    description: |-
      Helps troubleshoot high CPU usage or throttling:

      - waiting: The percentage of time at least one task in the VictoriaLogs process was ready to run (runnable) but couldn't get scheduled on the CPU.
      - stalled: The percentage of time all tasks in the process (except idle ones) were unable to get CPU time — a full CPU stall.

      If there's a CPU burst, it's normal to see waiting or stalled > 1%. It only becomes a concern if it consistently climbs above 5–10% and aligns with latency spikes or GC slowdowns.
    fieldConfig:
      defaults:
        color:
          mode: palette-classic
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          axisSoftMax: 1
          axisSoftMin: 0
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: line
        decimals: 0
        links: []
        mappings: []
        min: 0
        noValue: "0"
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
        unit: percentunit
      overrides: []
    gridPos:
      h: 8
      w: 12
      x: 12
      "y": 70
    id: 72
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: desc
    pluginVersion: 12.1.0
    type: timeseries
  - title: Read/Write syscalls ($instance)
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "max(rate(process_io_read_syscalls_total{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval])) by(%s)" $clusterLabel $clusterLabel }}
      editorMode: code
      format: time_series
      hide: false
      interval: ""
      intervalFactor: 1
      legendFormat: read calls
      range: true
      refId: A
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "max(rate(process_io_write_syscalls_total{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval])) by(%s)" $clusterLabel $clusterLabel }}
      editorMode: code
      format: time_series
      hide: false
      interval: ""
      intervalFactor: 1
      legendFormat: write calls
      range: true
      refId: B
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    description: |-
      Number of read/write calls application makes:

      - read call: Number of read*()-family system calls your process has issued since start. Each call can move 1 byte or megabytes, cached or uncached.
      - write call: Number of write*()-family system calls (including write, pwrite, writev, etc.) made by the process.
    fieldConfig:
      defaults:
        color:
          mode: palette-classic
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        links: []
        mappings: []
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: short
      overrides:
      - matcher:
          id: byName
          options: read calls
        properties:
        - id: custom.transform
          value: negative-Y
    gridPos:
      h: 8
      w: 12
      x: 0
      "y": 78
    id: 56
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: none
    pluginVersion: 12.1.0
    type: timeseries
  - title: Open FDs % usage ($instance)
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "max_over_time(process_open_fds{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval]) / process_max_fds{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}" $clusterLabel $clusterLabel }}
      editorMode: code
      format: time_series
      hide: false
      interval: ""
      intervalFactor: 2
      legendFormat: '{{`{{`}}instance{{`}}`}}'
      range: true
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    description: |-
      Percentage of open file descriptors (files, sockets, pipes, etc.,) compared to the limit set in the OS. Reaching the limit of open files can cause various issues and must be prevented.

      See [how to change limits](https://medium.com/@muhammadtriwibowo/set-permanently-ulimit-n-open-files-in-ubuntu-4d61064429a).
    fieldConfig:
      defaults:
        color:
          mode: palette-classic-by-name
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        decimals: 2
        links: []
        mappings: []
        min: 0
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: percentunit
      overrides:
      - matcher:
          id: byName
          options: max
        properties:
        - id: color
          value:
            fixedColor: '#C4162A'
            mode: fixed
    gridPos:
      h: 8
      w: 12
      x: 12
      "y": 78
    id: 46
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: none
    pluginVersion: 12.1.0
    type: timeseries
  - title: Disk writes/reads ($instance)
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "max(rate(process_io_storage_read_bytes_total{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval])) by(%s)" $clusterLabel $clusterLabel }}
      editorMode: code
      format: time_series
      hide: false
      interval: ""
      intervalFactor: 1
      legendFormat: read
      range: true
      refId: A
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "max(rate(process_io_storage_written_bytes_total{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval])) by(%s)" $clusterLabel $clusterLabel }}
      editorMode: code
      format: time_series
      hide: false
      interval: ""
      intervalFactor: 1
      legendFormat: write
      range: true
      refId: C
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    description: |-
      Measure the actual bytes read from and written to disk by the process:

      - read: physical bytes the kernel actually pulled from the storage device on behalf of the process (after checking page-cache).
      - write: physical bytes the kernel ultimately wrote to the storage device for the process (after combining, caching, or delaying writes).
    fieldConfig:
      defaults:
        color:
          mode: palette-classic
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        links: []
        mappings: []
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: bytes
      overrides:
      - matcher:
          id: byName
          options: read
        properties:
        - id: custom.transform
          value: negative-Y
    gridPos:
      h: 8
      w: 12
      x: 0
      "y": 86
    id: 52
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: none
    pluginVersion: 12.1.0
    type: timeseries
  - title: IO pressure
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "max(rate(process_pressure_io_waiting_seconds_total{job=~\"$job\",%s=~\"$cluster\"}[$__rate_interval])) by(instance,%s)" $clusterLabel $clusterLabel }}
      editorMode: code
      format: time_series
      interval: ""
      intervalFactor: 2
      legendFormat: '{{`{{`}}instance{{`}}`}}: waiting'
      range: true
      refId: A
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "sum(rate(process_pressure_io_stalled_seconds_total{job=~\"$job\",%s=~\"$cluster\"}[$__rate_interval])) by(instance,%s)" $clusterLabel $clusterLabel }}
      editorMode: code
      format: time_series
      hide: false
      interval: ""
      intervalFactor: 2
      legendFormat: '{{`{{`}}instance{{`}}`}}: stalled'
      range: true
      refId: B
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    description: |-
      IO pressure based on [Pressure Stall Information](https://docs.kernel.org/accounting/psi.html). The lower the better.

      - waiting: at least one runnable thread blocked on block-`I/O` (disk, NVMe, network-storage) while others could still make progress.
      - stalled: all non-idle threads simultaneously waiting on `I/O`; no useful user code ran during these periods → true `I/O` thrashing.

      If stalled > 0 while querying, it's recommended to increase queue depth on NVMe, raise blk-mq budgets, or relax cgroup I/O limits.
    fieldConfig:
      defaults:
        color:
          mode: palette-classic-by-name
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: line
        decimals: 0
        links: []
        mappings: []
        min: 0
        noValue: "0"
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
        unit: percentunit
      overrides: []
    gridPos:
      h: 8
      w: 12
      x: 12
      "y": 86
    id: 74
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: desc
    pluginVersion: 12.1.0
    type: timeseries
  - title: TCP connections ($instance)
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "max(vm_tcplistener_conns{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}) by(instance,%s)" $clusterLabel $clusterLabel }}
      editorMode: code
      format: time_series
      hide: false
      intervalFactor: 1
      legendFormat: '{{`{{`}}instance{{`}}`}}'
      range: true
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    description: Current number of active TCP connections to VictoriaLogs. This metric helps monitor connection pool usage and identify potential connection leaks. High values may indicate clients not properly closing connections or connection pooling issues. Monitor for gradual increases that could lead to resource exhaustion.
    fieldConfig:
      defaults:
        color:
          mode: palette-classic-by-name
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        links: []
        mappings: []
        min: 0
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: short
      overrides: []
    gridPos:
      h: 8
      w: 12
      x: 0
      "y": 94
    id: 60
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: none
    pluginVersion: 12.1.0
    type: timeseries
  - title: Goroutines ($instance)
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "max(go_goroutines{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}) by(instance,%s)" $clusterLabel $clusterLabel }}
      editorMode: code
      format: time_series
      intervalFactor: 2
      legendFormat: '{{`{{`}}instance{{`}}`}}'
      range: true
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    fieldConfig:
      defaults:
        color:
          mode: palette-classic-by-name
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        decimals: 0
        links: []
        mappings: []
        min: 0
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: short
      overrides: []
    gridPos:
      h: 8
      w: 12
      x: 12
      "y": 94
    id: 50
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: none
    pluginVersion: 12.1.0
    type: timeseries
  - title: TCP connections rate ($instance)
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "max(rate(vm_tcplistener_accepts_total{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval])) by(instance,%s)" $clusterLabel $clusterLabel }}
      editorMode: code
      format: time_series
      hide: false
      intervalFactor: 1
      legendFormat: '{{`{{`}}instance{{`}}`}}'
      range: true
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    description: Rate of incoming TCP connections accepted by VictoriaLogs. This metric indicates network activity and client connection patterns. Sudden spikes may indicate increased load or potential DDoS attacks. Sustained high rates should be correlated with resource usage to ensure adequate capacity.
    fieldConfig:
      defaults:
        color:
          mode: palette-classic-by-name
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        links: []
        mappings: []
        min: 0
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: short
      overrides: []
    gridPos:
      h: 8
      w: 12
      x: 0
      "y": 102
    id: 58
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: none
    pluginVersion: 12.1.0
    type: timeseries
  - title: Threads ($instance)
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "max(process_num_threads{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}) by(instance,%s)" $clusterLabel $clusterLabel }}
      editorMode: code
      format: time_series
      intervalFactor: 2
      legendFormat: '{{`{{`}}instance{{`}}`}}'
      range: true
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    fieldConfig:
      defaults:
        color:
          mode: palette-classic-by-name
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        decimals: 0
        links: []
        mappings: []
        min: 0
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: short
      overrides: []
    gridPos:
      h: 8
      w: 12
      x: 12
      "y": 102
    id: 54
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: none
    pluginVersion: 12.1.0
    type: timeseries
  - title: CPU spent on GC ($instance)
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "max(rate(go_gc_cpu_seconds_total{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval]) / rate(process_cpu_seconds_total{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval])) by(instance,%s)" $clusterLabel $clusterLabel $clusterLabel }}
      editorMode: code
      format: time_series
      interval: ""
      intervalFactor: 2
      legendFormat: '{{`{{`}}instance{{`}}`}}'
      range: true
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    description: "Percent of CPU spent on garbage collection.\n\nIf % is high, then CPU usage can be decreased by changing `GOGC` to higher values. Increasing `GOGC` value will increase memory usage, and decrease CPU usage.\n\nTry searching for keyword `GOGC` at https://docs.victoriametrics.com/victoriametrics/troubleshooting/ "
    fieldConfig:
      defaults:
        color:
          mode: palette-classic
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        decimals: 0
        links: []
        mappings: []
        min: 0
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: percentunit
      overrides: []
    gridPos:
      h: 8
      w: 12
      x: 0
      "y": 110
    id: 119
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: desc
    pluginVersion: 12.1.0
    type: timeseries
  - title: Go scheduling latency
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "sum(histogram_quantile(0.99, sum(rate(go_sched_latencies_seconds_bucket{job=~\"$job\",%s=~\"$cluster\"}[$__rate_interval])) by(instance,le,%s))) by(instance,%s)" $clusterLabel $clusterLabel $clusterLabel }}
      editorMode: code
      format: time_series
      interval: ""
      intervalFactor: 2
      legendFormat: '{{`{{`}}instance{{`}}`}}'
      range: true
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    description: "Time goroutines have spent in runnable state before actually running. The lower is better.\n\nHigh values or values exceeding the threshold is usually a sign of            insufficient CPU resources or CPU throttling. \n\nVerify that service has enough CPU resources. Otherwise, the service could work unreliably with delays in processing."
    fieldConfig:
      defaults:
        color:
          mode: palette-classic
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: line
        decimals: 0
        links: []
        mappings: []
        min: 0
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 0.1
        unit: s
      overrides: []
    gridPos:
      h: 8
      w: 12
      x: 12
      "y": 110
    id: 61
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: desc
    pluginVersion: 12.1.0
    type: timeseries
  collapsed: true
  gridPos:
    h: 1
    w: 24
    x: 0
    "y": 51
  id: 28
  type: row
- title: Storage
  panels:
  - title: Partition Count
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "sum(vl_partitions{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}) by(%s)" $clusterLabel $clusterLabel }}
      editorMode: code
      exemplar: false
      format: time_series
      instant: true
      interval: ""
      intervalFactor: 1
      legendFormat: '{{`{{`}}instance{{`}}`}}'
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    description: "Total number of time-based (daily) partitions in storage. The number typically grows over time as new data arrives and is partitioned by time periods. \n\nExcessive partition counts may indicate retention policy issues or very high data ingestion rates that could impact query performance."
    fieldConfig:
      defaults:
        color:
          mode: thresholds
        mappings: []
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
        unit: short
      overrides: []
    gridPos:
      h: 8
      w: 3
      x: 0
      "y": 53
    id: 88
    maxDataPoints: 100
    options:
      colorMode: value
      graphMode: area
      justifyMode: auto
      orientation: horizontal
      percentChangeColorMode: standard
      reduceOptions:
        calcs:
        - lastNotNull
        fields: ""
        values: false
      showPercentChange: false
      text: {}
      textMode: auto
      wideLayout: true
    pluginVersion: 12.1.0
    type: stat
  - title: Part count max by type ($instance)
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: ${ds}
      expr: {{ printf "max(vl_storage_parts{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}) by(type,%s)" $clusterLabel $clusterLabel }}
      editorMode: code
      exemplar: true
      hide: false
      interval: ""
      legendFormat: '{{`{{`}}type{{`}}`}}'
      range: true
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: ${ds}
    description: Number of storage parts (data files) in each tier. More parts mean fragmentation; fewer parts suggest successful merging. High part counts may slow queries and trigger background merge operations.
    fieldConfig:
      defaults:
        color:
          mode: palette-classic-by-name
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        mappings: []
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: short
      overrides: []
    gridPos:
      h: 8
      w: 9
      x: 3
      "y": 53
    id: 84
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: none
    pluginVersion: 12.1.0
    type: timeseries
  - title: Disk ($instance)
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: ${ds}
      expr: {{ printf "(max(max_over_time(vl_max_disk_space_usage_bytes{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval])) by(job,%s) / max(vl_total_disk_space_bytes{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}) by(job,%s)) > 0" $clusterLabel $clusterLabel $clusterLabel $clusterLabel }}
      editorMode: code
      exemplar: true
      hide: false
      interval: ""
      legendFormat: max space retention of instances
      range: true
      refId: A
    - datasource:
        type: {{ $defaultDatasource }}
        uid: ${ds}
      expr: {{ printf "max(max_over_time(vl_data_size_bytes{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval])) by(job,%s) / max(vl_total_disk_space_bytes{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}) by(job,%s)" $clusterLabel $clusterLabel $clusterLabel $clusterLabel }}
      editorMode: code
      exemplar: true
      hide: false
      interval: ""
      legendFormat: '{{`{{`}}job{{`}}`}}'
      range: true
      refId: B
    datasource:
      type: {{ $defaultDatasource }}
      uid: ${ds}
    description: |-
      Disk space usage and limits for VictoriaLogs storage. Tracks current data usage against the configured retention limit or available disk space.

      The red line indicates the space retention limit. When usage approaches this limit, older data will be automatically deleted. If the space retention limit (`-retention.maxDiskSpaceUsageBytes`) is not specified, the red line represents the maximum disk space. In that case, the storage will switch to read-only mode when the limit is reached.
    fieldConfig:
      defaults:
        color:
          mode: palette-classic-by-name
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          axisSoftMax: 1
          axisSoftMin: 0
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: line
        mappings: []
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 1
        unit: percentunit
      overrides:
      - matcher:
          id: byName
          options: max space retention of instances
        properties:
        - id: color
          value:
            fixedColor: orange
            mode: fixed
        - id: custom.insertNulls
          value: 3.6e+06
    gridPos:
      h: 8
      w: 12
      x: 12
      "y": 53
    id: 110
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: none
    pluginVersion: 12.1.0
    type: timeseries
  - title: Merge events
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: ${ds}
      expr: {{ printf "sum(increase(vl_merges_total{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval])) by(type,%s)" $clusterLabel $clusterLabel }}
      editorMode: code
      exemplar: true
      hide: false
      interval: $__rate_interval
      legendFormat: '{{`{{`}}type{{`}}`}}'
      range: true
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: ${ds}
    description: Number of storage merge operations by type (sum across instances). Merges compact smaller parts into larger ones; bursts are normal after activity spikes.
    fieldConfig:
      defaults:
        color:
          mode: palette-classic-by-name
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        mappings: []
        min: 0
        noValue: "0"
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: short
      overrides: []
    gridPos:
      h: 8
      w: 12
      x: 0
      "y": 61
    id: 112
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: none
    pluginVersion: 12.1.0
    type: timeseries
  - title: Merge duration p99 ($instance)
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: ${ds}
      expr: {{ printf "max(vl_merge_duration_seconds{job=~\"$job\",instance=~\"$instance\",quantile=\"0.9\",%s=~\"$cluster\"}) by(type,%s) > 0" $clusterLabel $clusterLabel }}
      editorMode: code
      exemplar: true
      hide: false
      interval: ""
      legendFormat: '{{`{{`}}type{{`}}`}}'
      range: true
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: ${ds}
    description: "99th percentile duration of merge operations by storage type. Merge operations combine smaller storage parts into larger ones for optimization. \n\nNormal merge durations vary by storage type and data volume. Consistently high durations may indicate storage performance issues, high write load, or insufficient resources for background operations. Monitor for trends that could impact overall system performance."
    fieldConfig:
      defaults:
        color:
          mode: palette-classic-by-name
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        mappings: []
        noValue: "0"
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: s
      overrides: []
    gridPos:
      h: 8
      w: 12
      x: 12
      "y": 61
    id: 86
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: none
    pluginVersion: 12.1.0
    type: timeseries
  - title: Merge bytes p99 ($instance)
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: ${ds}
      expr: {{ printf "max(vl_merge_bytes{job=~\"$job\",instance=~\"$instance\",quantile=\"0.99\",%s=~\"$cluster\"}) by(type,%s) > 0" $clusterLabel $clusterLabel }}
      editorMode: code
      exemplar: true
      hide: false
      interval: ""
      legendFormat: '{{`{{`}}type{{`}}`}}'
      range: true
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: ${ds}
    description: "99th percentile of data volume processed during merge operations by storage type. \n\nThis metric indicates the scale of background storage optimization activities. Larger merge sizes generally improve storage efficiency but require more resources. Consistently high values may indicate heavy write loads or large storage parts that need optimization. Monitor correlation with merge duration for performance insights."
    fieldConfig:
      defaults:
        color:
          mode: palette-classic-by-name
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        mappings: []
        min: 0
        noValue: "0"
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: bytes
      overrides: []
    gridPos:
      h: 8
      w: 24
      x: 0
      "y": 69
    id: 109
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: none
    pluginVersion: 12.1.0
    type: timeseries
  collapsed: true
  gridPos:
    h: 1
    w: 24
    x: 0
    "y": 52
  id: 82
  type: row
- title: Ingestion
  panels:
  - title: Logs ingestion rate
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "sum(rate(vl_rows_ingested_total{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval])) by(type,%s) > 0" $clusterLabel $clusterLabel }}
      editorMode: code
      format: time_series
      hide: false
      intervalFactor: 1
      legendFormat: '{{`{{`}}type{{`}}`}}'
      range: true
      refId: A
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "sum(rate(vl_bytes_ingested_total{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval])) by(type,%s) > 0" $clusterLabel $clusterLabel }}
      editorMode: code
      hide: false
      instant: false
      legendFormat: '{{`{{`}}type{{`}}`}} (bytes)'
      range: true
      refId: B
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    description: |-
      Rate of incoming log insertion requests by endpoint path. This metric tracks the ingestion load on VictoriaLogs, including different insertion methods and protocols.

      Higher rates indicate increased log ingestion activity. Monitor for sudden spikes that might indicate new log sources, application deployments, or potential issues requiring capacity planning. Sustained high rates may require scaling ingestion capacity.
    fieldConfig:
      defaults:
        color:
          mode: palette-classic
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        links: []
        mappings: []
        min: 0
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: short
      overrides:
      - matcher:
          id: byRegexp
          options: /.*(bytes)/
        properties:
        - id: custom.axisPlacement
          value: right
        - id: unit
          value: bytes
    gridPos:
      h: 8
      w: 12
      x: 0
      "y": 54
    id: 113
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: desc
    pluginVersion: 12.1.0
    type: timeseries
  - title: Request rate
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "sum(rate(vl_http_requests_total{job=~\"$job\",instance=~\"$instance\",path=~\"^/(internal/)?insert.*\",%s=~\"$cluster\"}[$__rate_interval])) by(path,%s) > 0" $clusterLabel $clusterLabel }}
      editorMode: code
      format: time_series
      interval: ""
      intervalFactor: 1
      legendFormat: '{{`{{`}}path{{`}}`}}'
      range: true
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    description: "Rate of incoming query requests by endpoint path. This metric tracks the query load on VictoriaLogs, including different query interfaces and internal operations. \n\nHigher rates indicate increased query activity from users or applications. Monitor for sudden spikes that might indicate new dashboards, automated queries, or potential performance issues. Sustained high rates may require scaling query processing capacity."
    fieldConfig:
      defaults:
        color:
          mode: palette-classic
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        links: []
        mappings: []
        min: 0
        noValue: "0"
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: short
      overrides: []
    gridPos:
      h: 8
      w: 12
      x: 12
      "y": 54
    id: 117
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: desc
    pluginVersion: 12.1.0
    type: timeseries
  - title: Insert duration p99
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "max(vl_http_request_duration_seconds{job=~\"$job\",instance=~\"$instance\",quantile=\"0.99\",path=~\"^/(internal/)?insert.*\",%s=~\"$cluster\"}) by(path,%s) > 0" $clusterLabel $clusterLabel }}
      editorMode: code
      format: time_series
      intervalFactor: 1
      legendFormat: '{{`{{`}}path{{`}}`}}'
      range: true
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    description: 99th percentile of insert operation duration. This represents the time it takes for 99% of insert operations to complete. High values indicate slow ingestion performance that could affect overall system throughput. Spikes may suggest storage bottlenecks, resource contention, or inefficient data processing.
    fieldConfig:
      defaults:
        color:
          mode: palette-classic
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        links: []
        mappings: []
        min: 0
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: s
      overrides: []
    gridPos:
      h: 8
      w: 12
      x: 0
      "y": 62
    id: 103
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: desc
    pluginVersion: 12.1.0
    type: timeseries
  - title: Request duration p99 ($instance)
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "max(vl_http_request_duration_seconds{job=~\"$job\",instance=~\"$instance\",quantile=\"0.99\",path=~\"^/(internal/)?insert.*\",%s=~\"$cluster\"}) by(path,%s) > 0" $clusterLabel $clusterLabel }}
      editorMode: code
      format: time_series
      intervalFactor: 1
      legendFormat: '{{`{{`}}path{{`}}`}}'
      range: true
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    description: 99th percentile response time for VictoriaLogs HTTP endpoints, grouped by instance and path. This means 99% of requests are faster than this value. **Lower numbers are better**, as they indicate faster responses and fewer slow requests.
    fieldConfig:
      defaults:
        color:
          mode: palette-classic
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        links: []
        mappings: []
        min: 0
        noValue: "0"
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: s
      overrides: []
    gridPos:
      h: 8
      w: 12
      x: 12
      "y": 62
    id: 116
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: desc
    pluginVersion: 12.1.0
    type: timeseries
  - title: Message processors ($instance)
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "max(max_over_time(vl_insert_processors_count{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval])) by(instance,%s)" $clusterLabel $clusterLabel }}
      editorMode: code
      format: time_series
      interval: ""
      intervalFactor: 1
      legendFormat: '{{`{{`}}instance{{`}}`}}'
      range: true
      refId: A
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "max(max_over_time(vm_concurrent_insert_capacity{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval])) by(%s)" $clusterLabel $clusterLabel }}
      editorMode: code
      hide: false
      instant: false
      legendFormat: soft limit
      range: true
      refId: B
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    description: |-
      Number of active message processors handling log ingestion. These processors parse and process incoming log messages before storage. The count typically correlates with the ingestion load.

      If this number is unusually high or inflated (which is rare), check memory usage. It may indicate a heavy, concurrently ingestion load or processing bottlenecks that could benefit from performance tuning.
    fieldConfig:
      defaults:
        color:
          mode: palette-classic-by-name
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: opacity
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        decimals: 0
        links: []
        mappings: []
        min: 0
        noValue: "0"
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: short
      overrides: []
    gridPos:
      h: 8
      w: 12
      x: 0
      "y": 70
    id: 97
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: desc
    pluginVersion: 12.1.0
    type: timeseries
  - title: Pending rows ($instance)
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "sum(vl_pending_rows{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}) by(type,%s)" $clusterLabel $clusterLabel }}
      editorMode: code
      format: time_series
      interval: ""
      intervalFactor: 1
      legendFormat: '{{`{{`}}type{{`}}`}}'
      range: true
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    description: |-
      Number of log rows waiting to be written to storage, categorized by type. Pending rows indicate temporary queuing during ingestion. Consistently high values may suggest storage write bottlenecks or insufficient write capacity.

      Pending rows are flushed in two ways:

      - After a specific time period (typically 1 second)
      - When the pending row size exceeds a threshold (typically 1.75 MB)
    fieldConfig:
      defaults:
        color:
          mode: palette-classic-by-name
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        links: []
        mappings: []
        min: 0
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: short
      overrides: []
    gridPos:
      h: 8
      w: 12
      x: 12
      "y": 70
    id: 104
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: desc
    pluginVersion: 12.1.0
    type: timeseries
  - title: Concurrent insert limit reached ($instance)
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "max(increase(vm_concurrent_insert_limit_reached_total[$__rate_interval])) by(instance,%s)" $clusterLabel }}
      editorMode: code
      format: time_series
      interval: ""
      intervalFactor: 1
      legendFormat: '{{`{{`}}instance{{`}}`}}'
      range: true
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    description: |
      Number of concurrent insert operations has reached the configured limit: -maxConcurrentInserts (default: 2x CPU cores
    fieldConfig:
      defaults:
        color:
          mode: palette-classic
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: opacity
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        links: []
        mappings: []
        min: 0
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: short
      overrides:
      - matcher:
          id: byName
          options: limit
        properties:
        - id: color
          value:
            fixedColor: red
            mode: fixed
    gridPos:
      h: 8
      w: 12
      x: 0
      "y": 78
    id: 143
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: desc
    pluginVersion: 12.1.0
    type: timeseries
  - title: Insert timeouts ($Instance)
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "sum(rate(vm_concurrent_insert_limit_timeout_total{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval])) by(instance,%s)" $clusterLabel $clusterLabel }}
      editorMode: code
      interval: ""
      legendFormat: '{{`{{`}}instance{{`}}`}}'
      range: true
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    description: |-
      Number of insert requests that timed out while waiting for available concurrency slots. This indicates sustained ingestion overload beyond configured limits.

      High values suggest:
      - Insert queue is consistently full
      - Insert requests waiting too long for execution slots
      - System under sustained heavy ingestion load
      - Need for horizontal scaling or ingestion optimization

      Combined with `Insert concurrency limit reached`, provides complete picture of ingestion rejection patterns.
    fieldConfig:
      defaults:
        color:
          mode: palette-classic
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            vis: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        mappings: []
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 1
        unit: reqps
      overrides: []
    gridPos:
      h: 8
      w: 12
      x: 12
      "y": 78
    id: 131
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
      tooltip:
        hideZeros: false
        mode: single
        sort: none
    pluginVersion: 12.1.0
    type: timeseries
  - title: Flush duration p99
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "sum(vl_insert_flush_duration_seconds{job=~\"$job\",instance=~\"$instance\",quantile=\"0.99\",%s=~\"$cluster\"}) by(type,%s) > 0" $clusterLabel $clusterLabel }}
      editorMode: code
      format: time_series
      intervalFactor: 1
      legendFormat: '{{`{{`}}type{{`}}`}}'
      range: true
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    description: 99th percentile duration of background flush operations by type. High values may indicate disk pressure or heavy ingestion. Correlate with `I/O` panels.
    fieldConfig:
      defaults:
        color:
          mode: palette-classic
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        links: []
        mappings: []
        min: 0
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: s
      overrides: []
    gridPos:
      h: 8
      w: 12
      x: 0
      "y": 86
    id: 115
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: desc
    pluginVersion: 12.1.0
    type: timeseries
  collapsed: true
  gridPos:
    h: 1
    w: 24
    x: 0
    "y": 53
  id: 83
  type: row
- title: Querying
  panels:
  - title: Query rate
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "sum(rate(vl_http_requests_total{job=~\"$job\",instance=~\"$instance\",path=~\"^/(internal/)?select.*\",%s=~\"$cluster\"}[$__rate_interval])) by(path,%s) > 0" $clusterLabel $clusterLabel }}
      editorMode: code
      format: time_series
      interval: ""
      intervalFactor: 1
      legendFormat: '{{`{{`}}path{{`}}`}}'
      range: true
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    description: "Rate of incoming query requests by endpoint path. This metric tracks the query load on VictoriaLogs, including different query interfaces and internal operations. \n\nHigher rates indicate increased query activity from users or applications. Monitor for sudden spikes that might indicate new dashboards, automated queries, or potential performance issues. Sustained high rates may require scaling query processing capacity."
    fieldConfig:
      defaults:
        color:
          mode: palette-classic
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        links: []
        mappings: []
        min: 0
        noValue: "0"
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: short
      overrides: []
    gridPos:
      h: 8
      w: 12
      x: 0
      "y": 55
    id: 102
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: desc
    pluginVersion: 12.1.0
    type: timeseries
  - title: Query duration p99
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "max(vl_http_request_duration_seconds{job=~\"$job\",instance=~\"$instance\",quantile=\"0.99\",path=~\"^/(internal/)?select.*\",%s=~\"$cluster\"}) by(path,%s) > 0" $clusterLabel $clusterLabel }}
      editorMode: code
      format: time_series
      intervalFactor: 1
      legendFormat: '{{`{{`}}path{{`}}`}}'
      range: true
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    description: "99th percentile of query execution duration. This represents the time it takes for 99% of queries to complete:\n\n- High values indicate slow query performance that affects user experience. \n- Spikes may suggest complex queries, resource contention, or inefficient indexes. Monitor for trends that could indicate degrading performance."
    fieldConfig:
      defaults:
        color:
          mode: palette-classic
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        links: []
        mappings: []
        min: 0
        noValue: "0"
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: s
      overrides: []
    gridPos:
      h: 8
      w: 12
      x: 12
      "y": 55
    id: 108
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: desc
    pluginVersion: 12.1.0
    type: timeseries
  - title: Concurrent queries ($instance)
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "max(max_over_time(vl_concurrent_select_current{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval])) by(%s)" $clusterLabel $clusterLabel }}
      editorMode: code
      format: time_series
      interval: ""
      intervalFactor: 1
      legendFormat: current
      range: true
      refId: A
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "max(max_over_time(vl_concurrent_select_capacity{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval])) by(%s)" $clusterLabel $clusterLabel }}
      editorMode: code
      format: time_series
      hide: false
      interval: ""
      intervalFactor: 1
      legendFormat: limit
      range: true
      refId: B
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    description: |-
      Number of concurrent select (query) operations compared to the configured limit.

      High utilization near the limit may indicate query bottlenecks or insufficient query processing capacity.

      If it's consistently high while CPU usage remains low, consider increasing the concurrency limit (`-search.maxConcurrentRequests`) or optimizing query performance to support more concurrent users.
    fieldConfig:
      defaults:
        color:
          mode: palette-classic
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        links: []
        mappings: []
        min: 0
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: short
      overrides:
      - matcher:
          id: byName
          options: limit
        properties:
        - id: color
          value:
            fixedColor: red
            mode: fixed
    gridPos:
      h: 8
      w: 12
      x: 0
      "y": 63
    id: 107
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: desc
    pluginVersion: 12.1.0
    type: timeseries
  - title: Query timeouts ($instance)
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: $ds
      expr: {{ printf "sum(rate(vl_concurrent_select_limit_timeout_total{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval])) by(instance,%s) > 0" $clusterLabel $clusterLabel }}
      editorMode: code
      interval: ""
      legendFormat: '{{`{{`}}instance{{`}}`}}'
      range: true
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: $ds
    description: |-
      Number of queries that timed out while waiting for available concurrency slots. This indicates sustained query overload beyond configured limits.

      High values suggest:
      - Query queue is consistently full
      - Queries waiting too long for execution slots
      - System under sustained heavy load
      - Need for horizontal scaling or query optimization

      Combined with `Select concurrency limit reached`, provides complete picture of query rejection patterns.
    fieldConfig:
      defaults:
        color:
          mode: palette-classic
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            vis: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        mappings: []
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 1
        unit: reqps
      overrides: []
    gridPos:
      h: 8
      w: 12
      x: 12
      "y": 63
    id: 132
    options:
      legend:
        calcs: []
        displayMode: list
        placement: bottom
        showLegend: true
      tooltip:
        hideZeros: false
        mode: single
        sort: none
    pluginVersion: 12.1.0
    type: timeseries
  collapsed: true
  gridPos:
    h: 1
    w: 24
    x: 0
    "y": 54
  id: 81
  type: row
- title: Slow Query Troubleshooting
  panels:
  - title: Blocks/query p99 ($instance)
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: ${ds}
      expr: {{ printf "max(histogram_quantile(0.99, sum(increase(vl_storage_per_query_processed_blocks_bucket{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval])) by(instance,vmrange,%s))) by(instance,%s)" $clusterLabel $clusterLabel $clusterLabel }}
      editorMode: code
      exemplar: true
      hide: false
      interval: ""
      legendFormat: '{{`{{`}}instance{{`}}`}}'
      range: true
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: ${ds}
    description: |-
      Number of storage blocks scanned per query (99th percentile). Each block contains logs for a specific time period and field combination. High values indicate queries scanning too many blocks, often caused by:

      - Wide time ranges without specific filters
      - Queries missing indexed fields (like `_stream`, `kubernetes.*`)
      - Non-selective filters that don't utilize `bloom filters`

      Correlate with `Bytes/query p99` - if blocks are high but bytes are low, blocks contain little data (good). If both are high, query is reading large amounts of data.
    fieldConfig:
      defaults:
        color:
          mode: palette-classic-by-name
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        mappings: []
        min: 0
        noValue: "0"
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: bytes
      overrides: []
    gridPos:
      h: 8
      w: 12
      x: 0
      "y": 56
    id: 130
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: none
    pluginVersion: 12.1.0
    type: timeseries
  - title: Bytes/query p99 ($instance)
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: ${ds}
      expr: {{ printf "max(histogram_quantile(0.99, sum(increase(vl_storage_per_query_total_read_bytes_bucket{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval])) by(instance,vmrange,%s))) by(instance,%s)" $clusterLabel $clusterLabel $clusterLabel }}
      editorMode: code
      exemplar: true
      hide: false
      interval: ""
      legendFormat: '{{`{{`}}instance{{`}}`}}'
      range: true
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: ${ds}
    description: |-
      Total bytes read from disk per query (99th percentile). This represents the complete `I/O` overhead for query execution, including:

      - Block headers and metadata
      - Bloom filter data for candidate selection
      - Column headers and indexes
      - Actual log values and timestamps

      High values indicate expensive queries. Compare with specific breakdown panels below to identify bottlenecks. Monitor trends over time and correlate with query complexity.
    fieldConfig:
      defaults:
        color:
          mode: palette-classic-by-name
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        mappings: []
        min: 0
        noValue: "0"
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: bytes
      overrides: []
    gridPos:
      h: 8
      w: 12
      x: 12
      "y": 56
    id: 121
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: none
    pluginVersion: 12.1.0
    type: timeseries
  - title: Block header bytes/query p99 ($instance)
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: ${ds}
      expr: {{ printf "max(histogram_quantile(0.99, sum(increase(vl_storage_per_query_block_headers_read_bytes_bucket{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval])) by(instance,vmrange,%s))) by(instance,%s) > 0.001" $clusterLabel $clusterLabel $clusterLabel }}
      editorMode: code
      exemplar: true
      hide: false
      interval: ""
      legendFormat: '{{`{{`}}instance{{`}}`}}'
      range: true
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: ${ds}
    description: |-
      Bytes read from block headers per query (99th percentile). Block headers contain metadata about each storage block including `time ranges`, `field names`, and data location pointers.

      High values indicate:
      - Query `time range` spans many blocks (reduce time range or add time-based filters)
      - Missing stream-level filters (`_stream` field) causing full block header scans
      - High cardinality fields creating excessive blocks

      Monitor relative changes over time - sudden increases suggest inefficient query patterns or changes in data structure.
    fieldConfig:
      defaults:
        color:
          mode: palette-classic-by-name
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        mappings: []
        min: 0
        noValue: "0"
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: bytes
      overrides: []
    gridPos:
      h: 8
      w: 12
      x: 0
      "y": 64
    id: 124
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: none
    pluginVersion: 12.1.0
    type: timeseries
  - title: Bloom filter bytes/query p99 ($instance)
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: ${ds}
      expr: {{ printf "max(histogram_quantile(0.99, sum(increase(vl_storage_per_query_bloom_filters_read_bytes_bucket{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval])) by(instance,vmrange,%s))) by(instance,%s) > 0.001" $clusterLabel $clusterLabel $clusterLabel }}
      editorMode: code
      exemplar: true
      hide: false
      interval: ""
      legendFormat: '{{`{{`}}instance{{`}}`}}'
      range: true
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: ${ds}
    description: |-
      Bytes read from Bloom filters per query (99th percentile). `Bloom filters` are probabilistic data structures that quickly eliminate blocks that definitely don't contain search terms.

      High values indicate:
      - Queries with low-selectivity text filters (common words like `error`, `info`)
      - Missing or ineffective field-based filters
      - Queries that force scanning many candidate blocks

      Optimize by adding specific field filters (`kubernetes.container_name`, `_stream`) before text searches. Monitor for sudden increases that indicate poor filter selectivity.
    fieldConfig:
      defaults:
        color:
          mode: palette-classic-by-name
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        mappings: []
        min: 0
        noValue: "0"
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: bytes
      overrides: []
    gridPos:
      h: 8
      w: 12
      x: 12
      "y": 64
    id: 129
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: none
    pluginVersion: 12.1.0
    type: timeseries
  - title: Value bytes/query p99 ($instance)
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: ${ds}
      expr: {{ printf "max(histogram_quantile(0.99, sum(increase(vl_storage_per_query_values_read_bytes_bucket{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval])) by(instance,vmrange,%s))) by(instance,%s)" $clusterLabel $clusterLabel $clusterLabel }}
      editorMode: code
      exemplar: true
      hide: false
      interval: ""
      legendFormat: '{{`{{`}}instance{{`}}`}}'
      range: true
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: ${ds}
    description: |-
      Bytes read from actual log values per query (99th percentile). This represents the uncompressed log content being retrieved and processed for the query result.

      High values indicate:
      - Queries returning large result sets (add `LIMIT` clause)
      - Retrieving logs with large payloads (`JSON` objects, stack traces)
      - Missing filters that would reduce matching log volume
      - Functions like `uniq` or `stats` processing many log entries

      Reduce by: adding selective filters, using field extractors instead of full log retrieval, limiting result count.
    fieldConfig:
      defaults:
        color:
          mode: palette-classic-by-name
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        mappings: []
        min: 0
        noValue: "0"
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: bytes
      overrides: []
    gridPos:
      h: 8
      w: 12
      x: 0
      "y": 72
    id: 122
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: none
    pluginVersion: 12.1.0
    type: timeseries
  - title: _time bytes/query p99 ($instance)
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: ${ds}
      expr: {{ printf "max(histogram_quantile(0.99, sum(increase(vl_storage_per_query_timestamps_read_bytes_bucket{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval])) by(instance,vmrange,%s))) by(instance,%s)" $clusterLabel $clusterLabel $clusterLabel }}
      editorMode: code
      exemplar: true
      hide: false
      interval: ""
      legendFormat: '{{`{{`}}instance{{`}}`}}'
      range: true
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: ${ds}
    description: |-
      Bytes read from timestamp column (`_time`) per query (99th percentile). The `_time` column is automatically indexed and used for time-range filtering during query execution.

      High values indicate:
      - Queries with very wide time ranges requiring timestamp scanning
      - Time-based aggregations over large datasets
      - Missing time-range restrictions in query filters

      This is usually the smallest component of query `I/O`. Spikes correlate with time range width and data density in the queried period.
    fieldConfig:
      defaults:
        color:
          mode: palette-classic-by-name
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        mappings: []
        min: 0
        noValue: "0"
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: bytes
      overrides: []
    gridPos:
      h: 8
      w: 12
      x: 12
      "y": 72
    id: 127
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: none
    pluginVersion: 12.1.0
    type: timeseries
  - title: Column header index bytes/query p99 ($instance)
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: ${ds}
      expr: {{ printf "max(histogram_quantile(0.99, sum(increase(vl_storage_per_query_columns_header_indexes_read_bytes_bucket{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval])) by(instance,vmrange,%s))) by(instance,%s)" $clusterLabel $clusterLabel $clusterLabel }}
      editorMode: code
      exemplar: true
      hide: false
      interval: ""
      legendFormat: '{{`{{`}}instance{{`}}`}}'
      range: true
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: ${ds}
    description: |-
      Bytes read from column header indexes per query (99th percentile). `Column header indexes` contain metadata about which fields exist in each block and their data types.

      High values suggest:
      - Queries scanning many blocks due to missing field filters
      - High field cardinality creating large index structures
      - Queries accessing many different field names across blocks
      - Schema evolution causing index fragmentation

      Optimize by using consistent `field names` and adding field-specific filters early in query pipeline.
    fieldConfig:
      defaults:
        color:
          mode: palette-classic-by-name
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        mappings: []
        min: 0
        noValue: "0"
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: bytes
      overrides: []
    gridPos:
      h: 8
      w: 12
      x: 0
      "y": 80
    id: 128
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: none
    pluginVersion: 12.1.0
    type: timeseries
  - title: Column header bytes/query p99 ($instance)
    targets:
    - datasource:
        type: {{ $defaultDatasource }}
        uid: ${ds}
      expr: {{ printf "max(histogram_quantile(0.99, sum(increase(vl_storage_per_query_columns_headers_read_bytes_bucket{job=~\"$job\",instance=~\"$instance\",%s=~\"$cluster\"}[$__rate_interval])) by(instance,vmrange,%s))) by(instance,%s)" $clusterLabel $clusterLabel $clusterLabel }}
      editorMode: code
      exemplar: true
      hide: false
      interval: ""
      legendFormat: '{{`{{`}}instance{{`}}`}}'
      range: true
      refId: A
    datasource:
      type: {{ $defaultDatasource }}
      uid: ${ds}
    description: |-
      Bytes read from column headers per query (99th percentile). `Column headers` store the actual field schema and compression metadata for each block's columns.

      This metric helps identify:
      - Schema complexity overhead (many fields per log entry)
      - Inefficient field access patterns
      - Blocks with heterogeneous schemas requiring header reads

      Compare with other `I/O` breakdown panels to understand query cost distribution. High column header reads suggest schema optimization opportunities or need for more selective field access patterns.
    fieldConfig:
      defaults:
        color:
          mode: palette-classic-by-name
        custom:
          axisBorderShow: false
          axisCenteredZero: false
          axisColorMode: text
          axisLabel: ""
          axisPlacement: auto
          barAlignment: 0
          barWidthFactor: 0.6
          drawStyle: line
          fillOpacity: 0
          gradientMode: none
          hideFrom:
            legend: false
            tooltip: false
            viz: false
          insertNulls: false
          lineInterpolation: linear
          lineWidth: 1
          pointSize: 5
          scaleDistribution:
            type: linear
          showPoints: never
          spanNulls: false
          stacking:
            group: A
            mode: none
          thresholdsStyle:
            mode: "off"
        mappings: []
        min: 0
        noValue: "0"
        thresholds:
          mode: absolute
          steps:
          - color: green
            value: 0
          - color: red
            value: 80
        unit: bytes
      overrides: []
    gridPos:
      h: 8
      w: 12
      x: 12
      "y": 80
    id: 123
    options:
      legend:
        calcs:
        - mean
        - lastNotNull
        - max
        displayMode: table
        placement: bottom
        showLegend: true
        sortBy: Last *
        sortDesc: true
      tooltip:
        hideZeros: false
        mode: multi
        sort: none
    pluginVersion: 12.1.0
    type: timeseries
  collapsed: true
  gridPos:
    h: 1
    w: 24
    x: 0
    "y": 55
  id: 126
  type: row
condition: {{ "($Values.vlogs).enabled" }}
description: Overview for single-node VictoriaLogs v1.29.0 or higher
fiscalYearStartMonth: 0
graphTooltip: 0
id: 8
links: []
preload: false
refresh: ""
schemaVersion: 41
time:
  from: now-3h
  to: now
timepicker: {}
uid: OqPIZTX4z
version: 1
weekStart: ""
