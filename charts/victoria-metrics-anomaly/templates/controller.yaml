{{- include "vm.enterprise.only" . -}}

{{- if not .Values.config.reader.datasource_url -}}
  {{ fail "Please provide url for reading data from VictoriaMetrics. You need to specify url in `config.reader.datasource_url` parameter in values.yaml"}}
{{- end -}}

{{- if not .Values.config.writer.datasource_url -}}
  {{ fail "Please provide url for writing data to VictoriaMetrics. You need to specify url in `config.writer.datasource_url` parameter  in values.yaml"}}
{{- end -}}

{{- if and (not .Values.config.reader.queries) (not .Values.config.preset) -}}
  {{ fail "At least one query must be specified. You nee to add queries in `config.reader.queries` parameter in values.yaml"}}
{{- end -}}

{{- $ctx := dict "helm" . }}
{{- $fullname := include "vm.fullname" $ctx }}
{{- $ns := include "vm.namespace" $ctx }}
---
apiVersion: apps/v1
kind: {{ ternary "StatefulSet" "Deployment" .Values.persistentVolume.enabled }}
metadata:
  namespace: {{ $ns }}
  name: {{ $fullname }}
spec:
  selector:
    matchLabels: {{ include "vm.selectorLabels" $ctx | nindent 6 }}
  template:
    metadata:
      {{- $annotations := dict "checksum/config" (include (print .Template.BasePath "/configmap.yaml") . | sha256sum) }}
      {{- $annotations = merge $annotations (deepCopy .Values.podAnnotations) }}
      annotations: {{ toYaml $annotations | nindent 8 }}
      {{- $_ := set $ctx "extraLabels" .Values.podLabels }}
      labels: {{ include "vm.podLabels" $ctx | nindent 8 }}
      {{- $_ := unset $ctx "extraLabels" }}
    spec:
      {{- if .Values.podSecurityContext}}
      securityContext: {{ include "vm.securityContext" (dict "securityContext" .Values.podSecurityContext "helm" .) | nindent 8 }}
      {{- end }}
      {{- with (.Values.imagePullSecrets | default .Values.global.imagePullSecrets) }}
      imagePullSecrets: {{ toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: model
          image: {{ include "vm.image" $ctx }}
          workingDir: {{ .Values.containerWorkingDir }}
          {{- if (((.Values.config).monitoring).pull).enabled }}
          {{- with (((.Values.config).monitoring).pull).port }}
          ports:
            - containerPort: {{ . }}
              name: metrics
          {{- end }}
          {{- end }}
          args: {{ include "vmanomaly.args" $ctx | nindent 12 }}
          {{- with .Values.envFrom }}
          envFrom: {{ toYaml . | nindent 12 }}
          {{- end }}
          {{- $env := default list }}
          {{- if and .Values.persistentVolume.enabled .Values.persistentVolume.dumpModels }}
          {{- $env = append $env (dict "name" "VMANOMALY_MODEL_DUMPS_DIR" "value" "/tmp/vmanomaly-storage/models") }}
          {{- end }}
          {{- if and .Values.persistentVolume.enabled .Values.persistentVolume.dumpData }}
          {{- $env = append $env (dict "name" "VMANOMALY_DATA_DUMPS_DIR" "value" "/tmp/vmanomaly-storage/data") }}
          {{- end }}
          {{- with (concat $env (.Values.env | default list)) }}
          env: {{ toYaml . | nindent 12 }}
          {{- end }}
          {{- if .Values.securityContext.enabled }}
          securityContext: {{ include "vm.securityContext" (dict "securityContext" .Values.securityContext "helm" .) | nindent 12 }}
          {{- end }}
          {{- with .Values.image.pullPolicy }}
          imagePullPolicy: {{ . }}
          {{- end }}
          {{- with .Values.resources }}
          resources: {{ toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: config
              mountPath: /etc/config
            {{- include "vm.license.mount" . | nindent 12 }}
            {{- if .Values.persistentVolume.enabled }}
            - name: models-dump
              mountPath: /tmp/vmanomaly-storage
            {{- end }}
            {{- with .Values.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations: {{ toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ $fullname }}
        {{- include "vm.license.volume" . | nindent 8 }}
        {{- if or (not .Values.persistentVolume.enabled) .Values.persistentVolume.existingClaim }}
        - name: models-dump
          {{- if .Values.persistentVolume.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistentVolume.existingClaim }}
          {{- else }}
          emptyDir: {{ toYaml .Values.emptyDir | nindent 12 }}
          {{- end }}
        {{- end }}
        {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
  {{- if and .Values.persistentVolume.enabled (not .Values.persistentVolume.existingClaim) }}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: models-dump
        {{- with .Values.persistentVolume.annotations }}
        annotations: {{ toYaml . | nindent 10 }}
        {{- end }}
      spec:
        {{- with .Values.persistentVolume.accessModes }}
        accessModes: {{ toYaml . | nindent 10 }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistentVolume.size }}
        {{- with .Values.persistentVolume.storageClassName }}
        storageClassName: {{ ternary "" . (eq "-" .) }}
        {{- end }}
        {{- with .Values.persistentVolume.matchLabels }}
        selector:
          matchLabels: {{ toYaml . | nindent 12 }}
        {{- end }}
{{- end }}
