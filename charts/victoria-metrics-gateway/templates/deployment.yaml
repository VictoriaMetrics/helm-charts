{{- $global := (dict "Values" (deepCopy .Values) "Release" (deepCopy .Release) "Chart" (deepCopy .Chart) "Template" (deepCopy .Template)) -}}
{{- include "vm.enterprise.only" . -}}
{{- if hasKey .Values.rateLimiter "enable" }}
  {{- fail "`rateLimiter.enable` is deprecated. Use `rateLimiter.enabled` instead" }}
{{- end }}
{{- if hasKey .Values.auth "enable" }}
  {{- fail "`auth.enable` is deprecated. Use `auth.enabled` instead" }}
{{- end }}
{{- if not (or .Values.auth.enabled .Values.rateLimiter.enabled) -}}
  {{- fail "at least one item in `.auth.enabled` or `.rateLimiter.enabled` must be set to `true`" -}}
{{- end -}}

{{- if .Values.rateLimiter.enabled -}}
  {{- if not .Values.rateLimiter.datasource.url -}}
  {{- fail "please specify datasource url (`.rateLimiter.datasource.url`) for Rate Limiting" -}}
  {{- end -}}
  {{- if not .Values.clusterMode -}}
  {{- fail "ratelimiting works only with cluster, please enable `.clusterMode`" -}}
  {{- end -}}
{{- end -}}

{{- if not .Values.read.url -}}
  {{- fail "please specify read url(`read.url`) for Rate Limiting or/and Access-Control" -}}
{{- end -}}

{{- if not .Values.write.url -}}
  {{- fail "please specify write url(`.write.url`) for Rate Limiting or/and Access-Control" -}}
{{- end -}}
{{- $isHost := gt (len .Values.extraHostPathMounts) 0 -}}
{{- $isExtraVolumes := or $isHost (gt (len .Values.extraVolumes) 0)  -}}
{{- $isVolumes := or $isExtraVolumes .Values.rateLimiter.enabled  (and .Values.license.secret.name .Values.license.secret.key) -}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "chart.fullname" . }}
  namespace: {{ include "vm.namespace" . }}
  labels: {{ include "chart.labels" . | nindent 4 }}
  {{- with .Values.annotations }}
  annotations: {{ toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels: {{ include "chart.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels: {{ include "chart.selectorLabels" . | nindent 8 }}
      {{- $annotations := merge (dict "checksum/config" (include (print .Template.BasePath "/configmap.yaml") . | sha256sum)) .Values.podAnnotations }}
      annotations: {{ toYaml $annotations | nindent 8 }}
    spec:
      serviceAccountName: {{ include "chart.serviceAccountName" . }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{ include "vm.compatibility.renderSecurityContext" (dict "secContext" .Values.podSecurityContext "context" .) | nindent 8 }}
      {{- end }}
      {{- with (.Values.imagePullSecrets | default .Values.global.imagePullSecrets) }}
      imagePullSecrets: {{ toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: vmgateway
          {{- if .Values.securityContext.enabled }}
          securityContext: {{ include "vm.compatibility.renderSecurityContext" (dict "secContext" .Values.securityContext "context" .) | nindent 12 }}
          {{- end }}
          image: {{ include "vm.image" (merge (deepCopy $global) (dict "app" .Values)) }}
          workingDir: {{ .Values.containerWorkingDir }}
          args: {{ include "vmgateway.args" . | nindent 12 }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ include "vm.port.from.flag" (dict "flag" .Values.extraArgs.httpListenAddr "default" "8431") }}
          {{- with .Values.envFrom }}
          envFrom: {{ toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.env }}
          env: {{ toYaml . | nindent 12 }}
          {{- end }}
          {{- with (fromYaml (include "vm.probe" (dict "app" .Values "type" "readiness"))) }}
          readinessProbe: {{ toYaml . | nindent 12 }}
          {{- end }}
          {{- with (fromYaml (include "vm.probe" (dict "app" .Values "type" "liveness"))) }}
          livenessProbe: {{ toYaml . | nindent 12 }}
          {{- end }}
          {{- with (fromYaml (include "vm.probe" (dict "app" .Values "type" "startup"))) }}
          startupProbe: {{ toYaml . | nindent 12 }} 
          {{- end }}
          {{- if $isVolumes }}
          volumeMounts:
            {{- if .Values.rateLimiter.enabled }}
            - name: config
              mountPath: /config
            {{- end }}
            {{- range .Values.extraHostPathMounts }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              {{- with .subPath }}
              subPath: {{ . }}
              {{- end }}
              {{- with .readOnly }}
              readOnly: {{ . }}
              {{- end }}
            {{- end }}
            {{- include "vm.license.mount" . | nindent 12 }}
            {{- with .Values.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- end }}
          {{- with .Values.resources }}
          resources: {{ toYaml . | nindent 12 }}
          {{- end }}
        {{- with .Values.extraContainers }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- if $isVolumes }}
      volumes:
        {{- if .Values.rateLimiter.enabled }}
        - name: config
          configMap:
            name: {{ include "chart.fullname" .}}
        {{- end }}
        {{- range .Values.extraHostPathMounts }}
        - name: {{ .name }}
          hostPath:
            path: {{ .hostPath }}
        {{- end }}
        {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- include "vm.license.volume" . | nindent 8 }}
      {{- end }}
