---
weight: 2
title: VictoriaLogs Cluster
menu:
  docs:
    parent: helm
    weight: 2
    identifier: helm-victorialogs-cluster
url: /helm/victorialogs-cluster
aliases:
  - /helm/victorialogs-cluster/index.html
  - /helm/victoria-logs-cluster/index.html
tags:
  - logs
  - kubernetes
---
{{ template "chart.badges" . }}

{{ template "chart.description" . }}

## Prerequisites

Before installing this chart, ensure your environment meets the following requirements:

* **Kubernetes cluster** - A running Kubernetes cluster with sufficient resources
* **Helm** - Helm package manager installed and configured

Additional requirements depend on your configuration:

* **Persistent storage** - Required if you enable persistent volumes for data retention (enabled by default)
* **kubectl** - Needed for cluster management and troubleshooting

For installation instructions, refer to the official documentation:
* [Installing Helm](https://helm.sh/docs/intro/install/)
* [Installing kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/)

## Chart Details

### VictoriaLogs Cluster

When you install the chart, it creates three core services and an optional log collector:

- `vlinsert` receives incoming log streams from various sources and load-balances them across remote nodes.
- `vlstorage` forms a StatefulSet that stores raw data on persistent volumes, applies the configured retention policy, and replicates the data across the number of replicas you define.
- `vlselect` provides the query API and reads data from any storage replica, so adding more `vlselect` pods increases read throughput without impacting the stored data.
- The log collector `vector` is disabled by default, but as soon as you set `vector.enabled: true`, a DaemonSet is deployed on every node. It starts tailing pod logs using the default parsing pipeline and automatically discovers the internal `vlinsert` addresses.

```yaml
vector:
  enabled: true
```

The default chart setup is shown below:

```mermaid
graph LR
    Vector["Log Collector"] --> VLI1["vlinsert-1"]
    Vector --> VLI2["vlinsert-2"]
    
    subgraph "VictoriaLogs Cluster"
        VLI1 --> VLS1["vlstorage-1"]
        VLI1 --> VLS2["vlstorage-2"]
        VLI2 --> VLS1
        VLI2 --> VLS2
        
        VLS1 <--> VLQ1["vlselect-1"]
        VLS1 <--> VLQ2["vlselect-2"]
        VLS2 <--> VLQ1
        VLS2 <--> VLQ2
    end
    
    VLQ1 <--> Users["Users/Grafana/vlogscli"]
    VLQ2 <--> Users
```

### Vector

When Vector is enabled with `vector.enabled: true`, the default configuration works out of the box:

* The default role is set to "Agent" (typically deployed as a DaemonSet with a data directory at `/vector-data-dir`).
* Vector is configured with the `k8s` source, using the `kubernetes_logs` type to collect logs from all Kubernetes pods in the cluster.
* The default transform configuration includes a parser component that performs JSON parsing on incoming log messages.
  * It attempts to parse the `message` field as JSON, and if successful, stores the parsed content in a `.log` field.
  * If JSON parsing fails, it falls back to the original message content.
* The default sink configuration includes a `vlogs` sink, configured as an Elasticsearch-compatible endpoint, which sends processed logs to `vlinsert` using bulk mode with `gzip` compression.

When you scale the number of `vlinsert` replicas using `vlinsert.replicaCount`, the chart automatically updates Vector's configuration to include all new instances, providing horizontal scaling of ingestion capacity without service interruption.

### vmauth

When you enable `vmauth` with:

```yaml
vmauth:
  enabled: true
```

The chart automatically launches a [`vmauth`](https://docs.victoriametrics.com/victoriametrics/vmauth/) service with a routing configuration that splits read and write traffic according to VictoriaLogs cluster architecture patterns.

External applications can send requests to `vmauth`, which will intelligently route:

- Write requests (log ingestion) to `vlinsert`.
- Read requests (log queries) to `vlselect`. 

The default Vector configuration bypasses this and continues sending logs directly to `vlinsert`. So, the chart can now be thought of as:

```mermaid
graph LR
    Vector["Log Collector"] --> VLI1["vlinsert-1"]
    Vector --> VLI2["vlinsert-2"]
    
    subgraph "VictoriaLogs Cluster"
        VLI1 --> VLS1["vlstorage-1"]
        VLI1 --> VLS2["vlstorage-2"]
        VLI2 --> VLS1
        VLI2 --> VLS2
        
        VLS1 <--> VLQ1["vlselect-1"]
        VLS1 <--> VLQ2["vlselect-2"]
        VLS2 <--> VLQ1
        VLS2 <--> VLQ2
    end
    
    VLQ1 <--> Users["vmauth"]
    VLQ2 <--> Users
```

Note that `vmauth` can send requests to `vlinsert` as needed. The diagram above shows a common use case.

{{ include "chart.installSection" . }}

{{ include "chart.uninstallSection" . }}

{{ include "chart.helmDocs" . }}

## Parameters

The following tables lists the configurable parameters of the chart and their default values.

Change the values according to the need of the environment in ``victoria-logs-cluster/values.yaml`` file.

{{ template "chart.valuesTableHtml" . }}
