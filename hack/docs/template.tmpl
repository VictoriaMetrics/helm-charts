{{ define "chart.valueDefaultColumnRender" }}
{{- $defaultValue := (default .Default .AutoDefault)  -}}
{{- $notationType := .NotationType }}
{{- if and (hasPrefix "`" $defaultValue) (hasSuffix "`" $defaultValue) -}}
{{- $defaultValue = (toYaml (fromJson (trimAll "`" (default .Default .AutoDefault) ) ) ) -}}
{{- if has .Type (list "list" "object" "map") -}}
{{- $notationType = "plaintext" }}
{{- end -}}
{{- end -}}
<pre class="helm-vars-default-value" language-yaml" lang="{{ $notationType }}">
<code class="language-yaml">
{{- if (eq $notationType "tpl" ) -}}
{{ .Key }}: |
{{- $defaultValue | nindent 2 }}
{{- else -}}
{{ $defaultValue }}
{{- end }}
</code>
</pre>
{{ end }}



{{- define "chart.installSection" -}}
## How to install

Access a Kubernetes cluster.

### Setup chart repository (can be omitted for OCI repositories)

Add a chart helm repository with follow commands:

```console
helm repo add vm https://victoriametrics.github.io/helm-charts/

helm repo update
```
List versions of `vm/{{ template "chart.name" . }}` chart available to installation:

```console
helm search repo vm/{{ template "chart.name" . }} -l
```

### Install `{{ template "chart.name" . }}` chart

Export default values of `{{ template "chart.name" . }}` chart to file `values.yaml`:

  - For HTTPS repository

    ```console
    helm show values vm/{{ template "chart.name" . }} > values.yaml
    ```
  - For OCI repository

    ```console
    helm show values oci://ghcr.io/victoriametrics/helm-charts/{{ template "chart.name" . }} > values.yaml
    ```

Change the values according to the need of the environment in ``values.yaml`` file.
{{- $release := (include "chart.name" .) | replace "-" " " | initials }}

Test the installation with command:

  - For HTTPS repository

    ```console
    helm install {{ $release }} vm/{{ template "chart.name" . }} -f values.yaml -n NAMESPACE --debug --dry-run
    ```

  - For OCI repository

    ```console
    helm install {{ $release }} oci://ghcr.io/victoriametrics/helm-charts/{{ template "chart.name" . }} -f values.yaml -n NAMESPACE --debug --dry-run
    ```

Install chart with command:

  - For HTTPS repository

    ```console
    helm install {{ $release }} vm/{{ template "chart.name" . }} -f values.yaml -n NAMESPACE
    ```

  - For OCI repository

    ```console
    helm install {{ $release }} oci://ghcr.io/victoriametrics/helm-charts/{{ template "chart.name" . }} -f values.yaml -n NAMESPACE
    ```

Get the pods lists by running this commands:

```console
kubectl get pods -A | grep '{{ $release }}'
```

Get the application by running this command:

```console
helm list -f {{ $release }} -n NAMESPACE
```

See the history of versions of `{{ $release }}` application with command.

```console
helm history {{ $release}} -n NAMESPACE
```
{{- end -}}




{{- define "chart.uninstallSection" -}}
{{- $release := (include "chart.name" .) | replace "-" " " | initials }}
## How to uninstall

Remove application with command.

```console
helm uninstall {{ $release }} -n NAMESPACE
```
{{- end -}}




{{- define "chart.helmDocs" -}}
## Documentation of Helm Chart

Install ``helm-docs`` following the instructions on this [tutorial](https://docs.victoriametrics.com/helm/requirements/).

Generate docs with ``helm-docs`` command.

```bash
cd charts/{{ template "chart.name" . }}

helm-docs
```

The markdown generation is entirely go template driven. The tool parses metadata from charts and generates a number of sub-templates that can be referenced in a template file (by default ``README.md.gotmpl``). If no template file is provided, the tool has a default internal template that will generate a reasonably formatted README.
{{- end -}}
